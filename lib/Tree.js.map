{"version":3,"sources":["Tree.js"],"names":["cx","Tree","props","onTreeNodeClick","bind","e","target","currentTarget","main","findDOMNode","stopPropagation","elements","querySelectorAll","i","len","length","className","split","filter","join","renderTreeNode","children","level","expand","defaultExpandAll","map","child","index","onClick","key","render","rest","build","TreeNode","createTreeNodes","datasource","Array","isArray","item","text","id","displayName","propTypes","bool","oneOfType","array","object","defaultProps"],"mappings":"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","file":"Tree.js","sourcesContent":["/**\n * @file melon/Tree\n * @author cxtom<cxtom2008@gmail.com>\n *         leon<ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes, cloneElement, Children} from 'react';\nimport ReactDOM from 'react-dom';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport TreeNode from './tree/TreeNode';\n\nconst cx = create('Tree');\n\n/**\n * melon/Tree\n *\n * @extends {React.Component}\n * @class\n */\nexport default class Tree extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     */\n    constructor(props) {\n        super(props);\n        this.onTreeNodeClick = this.onTreeNodeClick.bind(this);\n    }\n\n    /**\n     * 节点点击的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onTreeNodeClick(e) {\n\n        const target = e.currentTarget;\n        const main = ReactDOM.findDOMNode(this);\n\n        e.stopPropagation();\n\n        const elements = main.querySelectorAll('[data-role=tree-node]');\n\n        for (let i = 0, len = elements.length; i < len; ++i) {\n\n            elements[i].className = elements[i]\n                .className\n                .split(' ')\n                .filter(function (className) {\n                    return className !== 'state-selected';\n                })\n                .join(' ');\n\n        }\n\n        target.className += ' state-selected';\n\n    }\n\n    /**\n     * 渲染树节点\n     *\n     * @protected\n     * @param  {Array<ReactElement>} children 所有子节点\n     * @param  {number}              level    层级\n     * @return {?Array}\n     */\n    renderTreeNode(children, level) {\n\n        if (!children) {\n            return;\n        }\n\n        const expand = this.props.defaultExpandAll;\n\n        return Children.map(children, function (child, index) {\n\n            return cloneElement(child, {\n                onClick: this.onTreeNodeClick,\n                key: index,\n                level: level,\n                expand: expand\n            }, this.renderTreeNode(child.props.children, level + 1));\n\n        }, this);\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        /* eslint-disable fecs-min-vars-per-destructure */\n        const {children, ...rest} = this.props;\n\n        return (\n            <ul {...rest} className={cx(this.props).build()}>\n                {this.renderTreeNode(children, 1)}\n            </ul>\n        );\n\n    }\n\n}\n\n\nTree.TreeNode = TreeNode;\n\nTree.createTreeNodes = function (datasource, level = 1) {\n\n    if (datasource == null) {\n        return null;\n    }\n\n    if (!Array.isArray(datasource)) {\n        datasource = [datasource];\n    }\n\n    return datasource.map(function (item, index) {\n\n        return (\n            <TreeNode\n                level={level}\n                label={item.text}\n                key={item.id} >\n                {Tree.createTreeNodes(item.children, level + 1)}\n           </TreeNode>\n        );\n\n    });\n\n};\n\nTree.displayName = 'Tree';\n\nTree.propTypes = {\n    defaultExpandAll: PropTypes.bool,\n    datasource: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object\n    ])\n},\n\nTree.defaultProps = {\n\n    /**\n     * 默认展开树\n     * @type {Boolean}\n     */\n    defaultExpandAll: false\n\n};\n"]}