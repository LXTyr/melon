{"version":3,"sources":["Tree.js"],"names":["cx","Tree","props","onTreeNodeClick","bind","e","target","currentTarget","main","findDOMNode","stopPropagation","elements","querySelectorAll","i","len","length","className","split","filter","join","renderTreeNode","children","level","expand","map","child","index","onClick","key","count","render","variants","states","defaultExpandAll","rest","addVariants","addStates","build","TreeNode","createTreeNodes","datasource","Array","isArray","item","text","id","displayName","propTypes","bool","oneOfType","array","object","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAWA,QAAMA,KAAK,uBAAO,MAAP,CAAX;;AAEA;;;;;;;QAMqBC,I;;;AAEjB;;;;;;;AAOA,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA,qEACf,sBAAMA,KAAN,CADe;;AAEf,kBAAKC,eAAL,GAAuB,MAAKA,eAAL,CAAqBC,IAArB,OAAvB;AAFe;AAGlB;;AAED;;;;;;;;uBAMAD,e,4BAAgBE,C,EAAG;;AAEf,gBAAMC,SAASD,EAAEE,aAAjB;AACA,gBAAMC,OAAO,sBAASC,WAAT,CAAqB,IAArB,CAAb;;AAEAJ,cAAEK,eAAF;;AAEA,gBAAMC,WAAWH,KAAKI,gBAAL,CAAsB,uBAAtB,CAAjB;;AAEA,iBAAK,IAAIC,IAAI,CAAR,EAAWC,MAAMH,SAASI,MAA/B,EAAuCF,IAAIC,GAA3C,EAAgD,EAAED,CAAlD,EAAqD;;AAEjDF,yBAASE,CAAT,EAAYG,SAAZ,GAAwBL,SAASE,CAAT,EACnBG,SADmB,CAEnBC,KAFmB,CAEb,GAFa,EAGnBC,MAHmB,CAGZ,UAAUF,SAAV,EAAqB;AACzB,2BAAOA,cAAc,gBAArB;AACH,iBALmB,EAMnBG,IANmB,CAMd,GANc,CAAxB;AAQH;;AAEDb,mBAAOU,SAAP,IAAoB,iBAApB;AAEH,S;;uBAWDI,c,2BAAeC,Q,EAAUC,K,EAAuB;AAAA;;AAAA,gBAAhBC,MAAgB,uEAAP,KAAO;;;AAE5C,gBAAI,CAACF,QAAL,EAAe;AACX;AACH;;AAED,mBAAO,gBAASG,GAAT,CACHH,QADG,EAEH,UAACI,KAAD,EAAQC,KAAR;AAAA,uBAAkB,yBACdD,KADc,EAEd;AACIE,6BAAS,OAAKxB,eADlB;AAEIyB,yBAAKF,KAFT;AAGIJ,gCAHJ;AAIIC;AAJJ,iBAFc,EAQd,gBAASM,KAAT,CAAeJ,MAAMvB,KAAN,CAAYmB,QAA3B,IACM,OAAKD,cAAL,CACEK,MAAMvB,KAAN,CAAYmB,QADd,EAEEC,QAAQ,CAFV,EAGEC,MAHF,CADN,GAMM,IAdQ,CAAlB;AAAA,aAFG,CAAP;AAoBH,S;;uBAQDO,M,qBAAS;AAAA,yBAQD,KAAK5B,KARJ;AAAA,gBAGDmB,QAHC,UAGDA,QAHC;AAAA,gBAIDU,QAJC,UAIDA,QAJC;AAAA,gBAKDC,MALC,UAKDA,MALC;AAAA,gBAMDC,gBANC,UAMDA,gBANC;AAAA,gBAOEC,IAPF;;;AAUL,gBAAMlB,YAAYhB,KACbmC,WADa,CACDJ,QADC,EAEbK,SAFa,CAEHJ,MAFG,EAGbK,KAHa,EAAlB;;AAKA,mBACI;AAAA;AAAA,4CAAQH,IAAR,IAAc,WAAWlB,SAAzB;AACK,qBAAKI,cAAL,CAAoBC,QAApB,EAA8B,CAA9B,EAAiCY,gBAAjC;AADL,aADJ;AAMH,S;;;;;yBA7GgBhC,I;;;AAkHrBA,SAAKqC,QAAL;;AAEArC,SAAKsC,eAAL,GAAuB,UAAUC,UAAV,EAAiC;AAAA,YAAXlB,KAAW,uEAAH,CAAG;;;AAEpD,YAAIkB,cAAc,IAAlB,EAAwB;AACpB,mBAAO,IAAP;AACH;;AAED,YAAI,CAACC,MAAMC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC5BA,yBAAa,CAACA,UAAD,CAAb;AACH;;AAED,eAAOA,WAAWhB,GAAX,CAAe,UAAUmB,IAAV,EAAgBjB,KAAhB,EAAuB;;AAEzC,mBACI;AAAA;AAAA;AACI,2BAAOJ,KADX;AAEI,2BAAOqB,KAAKC,IAFhB;AAGI,yBAAKD,KAAKE,EAHd;AAIK5C,qBAAKsC,eAAL,CAAqBI,KAAKtB,QAA1B,EAAoCC,QAAQ,CAA5C;AAJL,aADJ;AASH,SAXM,CAAP;AAaH,KAvBD;;AAyBArB,SAAK6C,WAAL,GAAmB,MAAnB;;AAEA7C,SAAK8C,SAAL,GAAiB;AACbd,0BAAkB,iBAAUe,IADf;AAEbR,oBAAY,iBAAUS,SAAV,CAAoB,CAC5B,iBAAUC,KADkB,EAE5B,iBAAUC,MAFkB,CAApB;AAFC,KAAjB,EAQAlD,KAAKmD,YAAL,GAAoB;;AAEhB;;;;AAIAnB,0BAAkB;;AANF,KARpB","file":"Tree.js","sourcesContent":["/**\n * @file melon/Tree\n * @author cxtom<cxtom2008@gmail.com>\n *         leon<ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes, cloneElement, Children} from 'react';\nimport ReactDOM from 'react-dom';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport TreeNode from './tree/TreeNode';\n\nconst cx = create('Tree');\n\n/**\n * melon/Tree\n *\n * @extends {React.Component}\n * @class\n */\nexport default class Tree extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     */\n    constructor(props) {\n        super(props);\n        this.onTreeNodeClick = this.onTreeNodeClick.bind(this);\n    }\n\n    /**\n     * 节点点击的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onTreeNodeClick(e) {\n\n        const target = e.currentTarget;\n        const main = ReactDOM.findDOMNode(this);\n\n        e.stopPropagation();\n\n        const elements = main.querySelectorAll('[data-role=tree-node]');\n\n        for (let i = 0, len = elements.length; i < len; ++i) {\n\n            elements[i].className = elements[i]\n                .className\n                .split(' ')\n                .filter(function (className) {\n                    return className !== 'state-selected';\n                })\n                .join(' ');\n\n        }\n\n        target.className += ' state-selected';\n\n    }\n\n    /**\n     * 渲染树节点\n     *\n     * @protected\n     * @param  {Array<ReactElement>} children 所有子节点\n     * @param  {number}              level    层级\n     * @param  {boolean}             expand   是否展开\n     * @return {?Array}\n     */\n    renderTreeNode(children, level, expand = false) {\n\n        if (!children) {\n            return;\n        }\n\n        return Children.map(\n            children,\n            (child, index) => cloneElement(\n                child,\n                {\n                    onClick: this.onTreeNodeClick,\n                    key: index,\n                    level,\n                    expand\n                },\n                Children.count(child.props.children)\n                    ? this.renderTreeNode(\n                        child.props.children,\n                        level + 1,\n                        expand\n                    )\n                    : null\n            )\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        const {\n            children,\n            variants,\n            states,\n            defaultExpandAll,\n            ...rest\n        } = this.props;\n\n        const className = cx()\n            .addVariants(variants)\n            .addStates(states)\n            .build();\n\n        return (\n            <ul {...rest} className={className}>\n                {this.renderTreeNode(children, 1, defaultExpandAll)}\n            </ul>\n        );\n\n    }\n\n}\n\n\nTree.TreeNode = TreeNode;\n\nTree.createTreeNodes = function (datasource, level = 1) {\n\n    if (datasource == null) {\n        return null;\n    }\n\n    if (!Array.isArray(datasource)) {\n        datasource = [datasource];\n    }\n\n    return datasource.map(function (item, index) {\n\n        return (\n            <TreeNode\n                level={level}\n                label={item.text}\n                key={item.id} >\n                {Tree.createTreeNodes(item.children, level + 1)}\n           </TreeNode>\n        );\n\n    });\n\n};\n\nTree.displayName = 'Tree';\n\nTree.propTypes = {\n    defaultExpandAll: PropTypes.bool,\n    datasource: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.object\n    ])\n},\n\nTree.defaultProps = {\n\n    /**\n     * 默认展开树\n     * @type {Boolean}\n     */\n    defaultExpandAll: false\n\n};\n"]}