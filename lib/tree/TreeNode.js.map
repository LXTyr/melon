{"version":3,"sources":["tree/TreeNode.js"],"names":["cx","TreeNode","props","onClick","bind","state","expand","shouldComponentUpdate","nextProps","nextState","componentWillReceiveProps","setState","e","render","label","variants","states","expandIcon","unexpandIcon","children","level","icons","others","icon","iconStyle","labelStyle","paddingLeft","left","count","part","addVariants","addStates","build","className","propTypes","oneOfType","string","element","bool","selected","number","defaultProps"],"mappings":"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","file":"TreeNode.js","sourcesContent":["/**\n * @file melon/Tree\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes, Children} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from '../Icon';\nimport omit from 'lodash/omit';\n\nconst cx = create('TreeNode');\n\nexport default class TreeNode extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n\n        this.state = {\n            expand: props.expand || false\n        };\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.expand !== this.state.expand;\n    }\n\n    componentWillReceiveProps(props) {\n\n        if (props.expand === this.props.expand) {\n            return;\n        }\n\n        this.setState({expand: props.expand});\n    }\n\n    onClick(e) {\n        this.setState({expand: !this.state.expand});\n    }\n\n    render() {\n\n        let props = this.props;\n\n        let {\n            label,\n            variants,\n            states,\n            expandIcon,\n            unexpandIcon,\n            children,\n            level,\n            icons,\n            ...others\n        } = props;\n\n        let expand = this.state.expand;\n\n        let icon = expand\n            ? (expandIcon || icons[1])\n            : (unexpandIcon || icons[0]);\n\n        let iconStyle;\n        let labelStyle;\n\n        if (level) {\n            labelStyle = {\n                paddingLeft: level * 1.2 + 0.4 + 'em'\n            };\n            iconStyle = {\n                left: (0.25 + (level - 1) * 1.2) + 'em'\n            };\n        }\n\n        // 是否还有子节点\n        if (Children.count(children) > 0) {\n            children = [\n                <Icon\n                    key=\"icon\"\n                    icon={icon}\n                    onClick={this.onClick}\n                    style={iconStyle} />,\n                <span\n                    onClick={this.onClick}\n                    key=\"label\"\n                    data-role=\"tree-node-label\"\n                    style={labelStyle}\n                    className={cx().part('label').addVariants('parent').addStates({expand}).build()}>\n                    {label}\n                </span>,\n                <ul\n                    className={cx().part('root').addStates({expand}).build()}\n                    key=\"root\"\n                    ref=\"list\" >\n                    {children}\n                </ul>\n            ];\n        }\n        else {\n            children = (\n                <span\n                    onClick={this.onClick}\n                    key=\"label\"\n                    data-role=\"tree-node-label\"\n                    style={labelStyle}\n                    className={cx().part('label').build()}>\n                    {label}\n                </span>\n            );\n        }\n\n        const className = cx(props)\n            .addVariants(variants)\n            .addVariants('level' + props.level)\n            .addStates(states)\n            .build();\n\n        return (\n            <li\n                {...omit(others, ['expand'])}\n                data-role=\"tree-node\"\n                className={className}>\n                {children}\n            </li>\n        );\n\n    }\n\n}\n\nTreeNode.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element\n    ]),\n    expandIcon: PropTypes.string,\n    unexpandIcon: PropTypes.string,\n    expand: PropTypes.bool,\n    selected: PropTypes.bool,\n    level: PropTypes.number\n},\n\nTreeNode.defaultProps = {\n    label: '',\n    expand: false,\n    selected: false,\n    icons: [\n        'keyboard-arrow-right',\n        'keyboard-arrow-down'\n    ]\n};\n"]}