{"version":3,"sources":["tree/TreeNode.js"],"names":["cx","TreeNode","props","onClick","bind","state","expand","shouldComponentUpdate","nextProps","nextState","componentWillReceiveProps","setState","e","render","label","others","icon","expandIcon","ICON","unexpandIcon","children","iconStyle","labelStyle","level","paddingLeft","left","count","part","addVariants","addStates","build","propTypes","oneOfType","string","element","bool","selected","number","defaultProps"],"mappings":"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","file":"TreeNode.js","sourcesContent":["/**\n * @file melon/Tree\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes, Children} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from '../Icon';\n\nconst cx = create('TreeNode');\n\nexport default class TreeNode extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n\n        this.state = {\n            expand: props.expand || false\n        };\n\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextState.expand !== this.state.expand;\n    }\n\n    componentWillReceiveProps(props) {\n\n        if (props.expand === this.props.expand) {\n            return;\n        }\n\n        this.setState({expand: props.expand});\n    }\n\n    onClick(e) {\n        this.setState({expand: !this.state.expand});\n    }\n\n    render() {\n\n        const props = this.props;\n        /* eslint-disable fecs-min-vars-per-destructure */\n        const {label, ...others} = props;\n        /* eslint-enable fecs-min-vars-per-destructure */\n        const expand = this.state.expand;\n\n        const icon = expand\n            ? (props.expandIcon || TreeNode.ICON[1])\n            : (props.unexpandIcon || TreeNode.ICON[0]);\n\n        let children = props.children;\n\n        let iconStyle;\n        let labelStyle;\n\n        if (props.level) {\n            const level = props.level - 0;\n            labelStyle = {\n                paddingLeft: level * 1.2 + 0.4 + 'em'\n            };\n            iconStyle = {\n                left: (0.25 + (level - 1) * 1.2) + 'em'\n            };\n        }\n\n        // 是否还有子节点\n        if (Children.count(children) > 0) {\n            children = [\n                <Icon\n                    key=\"icon\"\n                    icon={icon}\n                    onClick={this.onClick}\n                    style={iconStyle} />,\n                <span\n                    onClick={this.onClick}\n                    key=\"label\"\n                    data-role=\"tree-node-label\"\n                    style={labelStyle}\n                    className={cx().part('label').addVariants('parent').addStates({expand}).build()}>\n                    {label}\n                </span>,\n                <ul\n                    className={cx().part('root').addStates({expand}).build()}\n                    key=\"root\"\n                    ref=\"list\" >\n                    {children}\n                </ul>\n            ];\n        }\n        else {\n            children = (\n                <span\n                    onClick={this.onClick}\n                    key=\"label\"\n                    data-role=\"tree-node-label\"\n                    style={labelStyle}\n                    className={cx().part('label').build()}>\n                    {label}\n                </span>\n            );\n        }\n\n        return (\n            <li\n                {...others}\n                data-role=\"tree-node\"\n                className={cx(props).addVariants('level' + props.level).build()}>\n                {children}\n            </li>\n        );\n\n    }\n\n}\n\nTreeNode.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.element\n    ]),\n    expandIcon: PropTypes.string,\n    unexpandIcon: PropTypes.string,\n    expand: PropTypes.bool,\n    selected: PropTypes.bool,\n    level: PropTypes.number\n},\n\nTreeNode.defaultProps = {\n    label: '',\n    expand: false,\n    selected: false\n};\n\nTreeNode.ICON = [\n    'expand-less',\n    'expand-more'\n];\n"]}