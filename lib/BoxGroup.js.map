{"version":3,"sources":["BoxGroup.js"],"names":["createOptions","cx","BoxGroup","props","context","value","state","Array","isArray","onChange","bind","renderOption","e","optionValue","target","getValue","boxModel","nextValue","index","indexOf","slice","type","currentValue","toArray","children","reduce","result","option","disabled","push","label","readOnly","render","className","addVariants","addStates","getStyleStates","build","map","displayName","propTypes","oneOf","isRequired","arrayOf","string","node","defaultProps","childContextTypes","contextTypes","datasource","name"],"mappings":"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","file":"BoxGroup.js","sourcesContent":["/**\n * @file melon/BoxGroup\n * @author cxtom<cxtom2008@gmail.com>\n * @author leon<ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Children} from 'react';\nimport Option from './boxgroup/Option';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport InputComponent from 'melon-core/InputComponent';\n\nconst cx = create('BoxGroup');\n\n/**\n * melon/BoxGroup\n *\n * @extends {melon-core/InputComponent}\n * @class\n */\nexport default class BoxGroup extends InputComponent {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     * @param  {*} context 上下文\n     */\n    constructor(props, context) {\n\n        super(props, context);\n\n        const value = this.state.value;\n\n        /**\n         * 状态\n         *\n         * @protected\n         * @type {Object}\n         */\n        this.state = {\n            ...this.state,\n            value: Array.isArray(value) ? value : [value]\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.renderOption = this.renderOption.bind(this);\n\n    }\n\n    /**\n     * 值改变时处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onChange(e) {\n\n        const optionValue = e.target.value;\n        const value = this.getValue();\n\n        const boxModel = this.props.boxModel;\n\n        let nextValue;\n\n        // 计算 radio 的值\n        if (boxModel === 'radio') {\n            nextValue = [optionValue];\n        }\n        // 计算 checkbox 的值\n        else {\n\n            const index = value.indexOf(optionValue);\n\n            nextValue = index > -1\n                ? [...value.slice(0, index), ...value.slice(index + 1)]\n                : [...value, optionValue];\n\n        }\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: nextValue\n        });\n\n    }\n\n    /**\n     * 获取当前值\n     *\n     * @public\n     * @return {Array<string>}\n     */\n    getValue() {\n\n        const currentValue = this.state.value;\n\n        return Children\n            .toArray(this.props.children)\n            .reduce(function (result, option) {\n\n                if (option && option.props) {\n\n                    const {disabled, value} = option.props;\n\n                    if (!disabled && currentValue.indexOf(value) > -1) {\n                        result.push(value);\n                    }\n\n                }\n\n                return result;\n\n            }, []);\n    }\n\n    /**\n     * 渲染选项\n     *\n     * @protected\n     * @param  {?ReactElement} option 选项\n     * @return {Array.ReactElement}\n     */\n    renderOption(option) {\n\n        const {type, props} = option;\n\n        // 如果 child 不是一个 <Option> 那么直接返回它\n        if (type !== 'option') {\n            return option;\n        }\n\n        const boxModel = this.props.boxModel;\n        const {value, children, label} = props;\n\n        return (\n            <Option\n                key={value}\n                boxModel={boxModel}\n                label={label || children}\n                value={value}\n                checked={this.state.value.indexOf(value) > -1}\n                disabled={this.props.disabled || props.disabled}\n                readOnly={this.props.readOnly}\n                onChange={this.onChange} />\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        const className = cx(this.props)\n            .addVariants(this.props.boxModel)\n            .addStates(this.getStyleStates())\n            .build();\n\n        return (\n            <div className={className}>\n                {Children.map(this.props.children, this.renderOption)}\n            </div>\n        );\n    }\n\n}\n\nBoxGroup.displayName = 'BoxGroup';\n\nBoxGroup.propTypes = {\n    ...InputComponent.propTypes,\n    boxModel: PropTypes.oneOf(['radio', 'checkbox']).isRequired,\n    value(...args) {\n        return InputComponent.propTypes.value(...args)\n            && PropTypes.arrayOf(PropTypes.string)(...args);\n    },\n    children: PropTypes.node.isRequired\n};\n\nBoxGroup.defaultProps = {\n    ...InputComponent.defaultProps,\n    boxModel: 'checkbox'\n};\n\nBoxGroup.childContextTypes = InputComponent.childContextTypes;\nBoxGroup.contextTypes = InputComponent.contextTypes;\n\n/**\n * 生成 BoxGroup 的选项\n *\n * @param  {Array<{disabled: boolean, name: string, value: string}>} datasource 数据\n * @return {Array<ReactElement>}\n */\nexport function createOptions(datasource) {\n\n    return datasource.map(function (option, index) {\n\n        const {name, value, disabled} = option;\n\n        return (\n            <option\n                key={value}\n                disabled={!!disabled}\n                label={name}\n                value={value} />\n        );\n\n    });\n\n}\n\nBoxGroup.createOptions = createOptions;\n"]}