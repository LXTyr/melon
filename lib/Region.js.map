{"version":3,"sources":["Region.js"],"names":["helper","cx","Region","props","context","state","datasource","onChange","bind","onSelectorChange","rawValue","type","target","value","stringifyValue","onAreaChange","index","cIndex","e","data","isAllSelected","children","setState","parseValue","split","map","parse","reduce","format","join","result","child","selected","push","id","renderCountry","country","part","build","text","renderArea","area","Array","isArray","length","a","render","defaultProps","propTypes","bool","arrayOf","object","childContextTypes","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;QASYA,M;;;;AATZ;;;;;AAaA,QAAMC,KAAK,uBAAO,QAAP,CAAX;;QAEqBC,M;;;AAEjB,wBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,qEAExB,2BAAMD,KAAN,EAAaC,OAAb,CAFwB;;AAIxB,kBAAKC,KAAL,+BACO,MAAKA,KADZ;AAEIC,4BAAY,MAAKH,KAAL,CAAWG;AAF3B;;AAKA,kBAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;AACA,kBAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBD,IAAtB,OAAxB;;AAVwB;AAY3B;;yBAEDD,Q,qBAASG,Q,EAAU;;AAEf,sCAAMH,QAAN,YAAe;AACXI,sBAAM,QADK;AAEXC,wBAAQ,IAFG;AAGXC,uBAAO,KAAKC,cAAL,CAAoBJ,QAApB;AAHI,aAAf;AAMH,S;;yBAEDK,Y,yBAAaC,K,EAAOC,M,EAAQC,C,EAAG;;AAE3B,gBAAMC,OAAOD,EAAEC,IAAf;AACA,gBAAMb,aAAa,KAAKD,KAAL,CAAWC,UAA9B;;AAEAN,mBAAOoB,aAAP,CAAqBD,IAArB;AACAb,uBAAWW,MAAX,EAAmBI,QAAnB,CAA4BL,KAA5B,IAAqCG,IAArC;AACAnB,mBAAOoB,aAAP,CAAqBd,WAAWW,MAAX,CAArB;;AAEA,iBAAKK,QAAL,CAAc,EAAChB,sBAAD,EAAd,EAA4B,YAAY;AACpC,qBAAKC,QAAL,CAAcD,UAAd;AACH,aAFD;AAIH,S;;yBAEDG,gB,6BAAiBO,K,QAAgB;AAAA,gBAARH,KAAQ,QAARA,KAAQ;;;AAE7B,gBAAMP,aAAa,KAAKD,KAAL,CAAWC,UAA9B;;AAEAN,mBAAOa,QAAQ,WAAR,GAAsB,WAA7B,EAA0CP,WAAWU,KAAX,CAA1C;;AAEA,iBAAKM,QAAL,CAAc,EAAChB,sBAAD,EAAd,EAA4B,YAAY;AACpC,qBAAKC,QAAL,CAAcD,UAAd;AACH,aAFD;AAIH,S;;yBAEDiB,U,uBAAWV,K,EAAO;AACdA,oBAAQA,MAAMW,KAAN,CAAY,GAAZ,CAAR;AACA,mBAAO,KAAKrB,KAAL,CAAWG,UAAX,CAAsBmB,GAAtB,CAA0BzB,OAAO0B,KAAP,CAAalB,IAAb,CAAkB,IAAlB,EAAwBK,KAAxB,CAA1B,CAAP;AACH,S;;yBAEDC,c,2BAAeR,U,EAAY;AAAA;;AACvB,mBAAOA,aACDA,WAAWqB,MAAX,CACE;AAAA,uBAAa,OAAKC,MAAL,yBAAb;AAAA,aADF,EAEE,EAFF,EAGAC,IAHA,CAGK,GAHL,CADC,GAKD,EALN;AAMH,S;;yBAEDD,M,mBAAOE,M,EAAQC,K,EAAOf,K,EAAO;AAAA;;AAEzB,gBAAIe,MAAMC,QAAV,EAAoB;AAChBF,uBAAOG,IAAP,CAAYF,MAAMG,EAAlB;AACH;;AAED,mBAAOH,MAAMV,QAAN,GACDU,MAAMV,QAAN,CAAeM,MAAf,CACE;AAAA,uBAAa,OAAKC,MAAL,yBAAb;AAAA,aADF,EAEEE,MAFF,CADC,GAKDA,MALN;AASH,S;;yBAEDK,a,0BAAcC,O,EAASpB,K,EAAO;AAAA;;AAC1B,mBACI;AAAA;AAAA,kBAAK,WAAWf,KAAKoC,IAAL,CAAU,SAAV,EAAqBC,KAArB,EAAhB,EAA8C,KAAKtB,KAAnD;AACI;AAAA;AAAA;AACI;AACI,+BAAOoB,QAAQG,IADnB;AAEI,4BAAIH,QAAQF,EAFhB;AAGI,+BAAOlB,KAHX;AAII,iCAASoB,QAAQJ,QAJrB;AAKI,kCAAU,qBAAK;AACX,mCAAKvB,gBAAL,CAAsBO,KAAtB,EAA6BE,CAA7B;AACH,yBAPL;AADJ,iBADJ;AAWK,qBAAKsB,UAAL,CAAgBJ,QAAQf,QAAxB,EAAkCL,KAAlC;AAXL,aADJ;AAeH,S;;yBAEDwB,U,uBAAWC,I,EAAMxB,M,EAAQ;AAAA;;AACrB,mBAAOyB,MAAMC,OAAN,CAAcF,IAAd,KAAuBA,KAAKG,MAAL,GAAc,CAArC,GAEC;AAAA;AAAA;AACKH,qBAAKhB,GAAL,CAAS,UAACoB,CAAD,EAAI7B,KAAJ;AAAA,2BACN;AACI,6BAAKA,KADT;AAEI,kCAAUA,QAAQ,CAAR,GAAY,CAAC,MAAD,CAAZ,GAAuB,EAFrC;AAGI,oCAAY6B,CAHhB;AAII,kCAAU,qBAAK;AACX,mCAAK9B,YAAL,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAiCC,CAAjC;AACH,yBANL,GADM;AAAA,iBAAT;AADL,aAFD,GAaC,IAbR;AAcH,S;;yBAED4B,M,qBAAS;AAAA;;AAEL,gBAAMxC,aAAa,KAAKD,KAAL,CAAWC,UAA9B;;AAEA,mBACI;AAAA;AAAA,kBAAK,WAAWL,GAAG,KAAKE,KAAR,EAAemC,KAAf,EAAhB;AACKhC,2BAAWmB,GAAX,CAAe;AAAA,2BAAa,OAAKU,aAAL,yBAAb;AAAA,iBAAf;AADL,aADJ;AAMH,S;;;;;yBAjIgBjC,M;;;AAuIrBA,WAAO6C,YAAP,+BACO,4BAAeA,YADtB;AAEIzC,oBAAY;AAFhB;;AAKAJ,WAAO8C,SAAP,+BACO,4BAAeA,SADtB;AAEIhB,kBAAU,iBAAUiB,IAFxB;AAGI3C,oBAAY,iBAAU4C,OAAV,CAAkB,iBAAUC,MAA5B;AAHhB;;AAMAjD,WAAOkD,iBAAP,GAA2B,4BAAeA,iBAA1C;AACAlD,WAAOmD,YAAP,GAAsB,4BAAeA,YAArC","file":"Region.js","sourcesContent":["/**\n * @file melon/Region\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {PropTypes} from 'react';\n\nimport Selector from './region/Selector';\nimport Area from './region/Area';\nimport * as helper from './region/helper';\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nconst cx = create('Region');\n\nexport default class Region extends InputComponent {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        this.state = {\n            ...this.state,\n            datasource: this.props.datasource\n        };\n\n        this.onChange = this.onChange.bind(this);\n        this.onSelectorChange = this.onSelectorChange.bind(this);\n\n    }\n\n    onChange(rawValue) {\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: this.stringifyValue(rawValue)\n        });\n\n    }\n\n    onAreaChange(index, cIndex, e) {\n\n        const data = e.data;\n        const datasource = this.state.datasource;\n\n        helper.isAllSelected(data);\n        datasource[cIndex].children[index] = data;\n        helper.isAllSelected(datasource[cIndex]);\n\n        this.setState({datasource}, function () {\n            this.onChange(datasource);\n        });\n\n    }\n\n    onSelectorChange(index, {value}) {\n\n        const datasource = this.state.datasource;\n\n        helper[value ? 'selectAll' : 'cancelAll'](datasource[index]);\n\n        this.setState({datasource}, function () {\n            this.onChange(datasource);\n        });\n\n    }\n\n    parseValue(value) {\n        value = value.split(',');\n        return this.props.datasource.map(helper.parse.bind(this, value));\n    }\n\n    stringifyValue(datasource) {\n        return datasource\n            ? datasource.reduce(\n                (...args) => this.format(...args),\n                []\n            ).join(',')\n            : '';\n    }\n\n    format(result, child, index) {\n\n        if (child.selected) {\n            result.push(child.id);\n        }\n\n        return child.children\n            ? child.children.reduce(\n                (...args) => this.format(...args),\n                result\n            )\n            : result;\n\n\n\n    }\n\n    renderCountry(country, index) {\n        return (\n            <div className={cx().part('country').build()} key={index}>\n                <h1>\n                    <Selector\n                        label={country.text}\n                        id={country.id}\n                        index={index}\n                        checked={country.selected}\n                        onChange={e => {\n                            this.onSelectorChange(index, e);\n                        }} />\n                </h1>\n                {this.renderArea(country.children, index)}\n            </div>\n        );\n    }\n\n    renderArea(area, cIndex) {\n        return Array.isArray(area) && area.length > 0\n            ? (\n                <ul>\n                    {area.map((a, index) =>\n                        <Area\n                            key={index}\n                            variants={index % 2 ? ['even'] : []}\n                            datasource={a}\n                            onChange={e => {\n                                this.onAreaChange(index, cIndex, e);\n                            }} />\n                    )}\n                </ul>\n            ) : null;\n    }\n\n    render() {\n\n        const datasource = this.state.datasource;\n\n        return (\n            <div className={cx(this.props).build()}>\n                {datasource.map((...args) => this.renderCountry(...args))}\n            </div>\n        );\n\n    }\n\n\n}\n\n\nRegion.defaultProps = {\n    ...InputComponent.defaultProps,\n    datasource: []\n};\n\nRegion.propTypes = {\n    ...InputComponent.propTypes,\n    selected: PropTypes.bool,\n    datasource: PropTypes.arrayOf(PropTypes.object)\n};\n\nRegion.childContextTypes = InputComponent.childContextTypes;\nRegion.contextTypes = InputComponent.contextTypes;\n"]}