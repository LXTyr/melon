{"version":3,"sources":["slider/Bar.js"],"names":["cx","SliderBar","render","props","height","maximum","minimum","value","disableFocusRipple","pointerSize","active","rest","percent","activeStyle","width","pointerStyle","outerPointerStyle","unit","replace","parseFloat","marginTop","part","addStates","build","left","displayName","propTypes","oneOfType","number","string","bool","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAUA,QAAMA,KAAK,uBAAO,WAAP,CAAX;;QAEqBC,S;;;;;;;;4BAEjBC,M,qBAAS;AAAA,yBAWD,KAAKC,KAXJ;AAAA,gBAGDC,MAHC,UAGDA,MAHC;AAAA,gBAIDC,OAJC,UAIDA,OAJC;AAAA,gBAKDC,OALC,UAKDA,OALC;AAAA,gBAMDC,KANC,UAMDA,KANC;AAAA,gBAODC,kBAPC,UAODA,kBAPC;AAAA,gBAQDC,WARC,UAQDA,WARC;AAAA,gBASDC,MATC,UASDA,MATC;AAAA,gBAUEC,IAVF;;;AAaL,gBAAMC,UAAW,CAACL,QAAQD,OAAT,KAAqBD,UAAUC,OAA/B,IAA0C,GAA3C,GAAkD,GAAlE;;AAEA,gBAAMO,cAAc;AAChBC,uBAAOF;AADS,aAApB;;AAIA,gBAAIG,eAAe,EAAnB;AACA,gBAAIC,oBAAoB,EAAxB;;AAEA,gBAAIP,WAAJ,EAAiB;AACbM,6BAAaD,KAAb,GAAqBC,aAAaX,MAAb,GAAsBK,WAA3C;;AAEA,oBAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACjC,wBAAMQ,OAAOR,YAAYS,OAAZ,CAAoB,YAApB,EAAkC,EAAlC,CAAb;AACA,wBAAMX,SAAQY,WAAWV,WAAX,CAAd;AACAO,sCAAkBF,KAAlB,GAA0BE,kBAAkBZ,MAAlB,GAA4BG,SAAQ,CAAT,GAAcU,IAAnE;AACAD,sCAAkBI,SAAlB,GAA+B,CAACb,MAAF,GAAWU,IAAzC;AACAF,iCAAaK,SAAb,GAA0B,CAACb,MAAD,GAAS,CAAV,GAAeU,IAAxC;AACH,iBAND,MAOK;AACDD,sCAAkBF,KAAlB,GAA0BE,kBAAkBZ,MAAlB,GAA2BK,cAAc,CAAnE;AACAO,sCAAkBI,SAAlB,GAA8B,CAACX,WAA/B;AACAM,iCAAaK,SAAb,GAAyB,CAACX,WAAD,GAAe,CAAxC;AACH;AACJ;;AAED,mBACI;AAAA;AAAA,4CAASE,IAAT,IAAe,WAAWX,KAAKqB,IAAL,CAAU,SAAV,EAAqBC,SAArB,CAA+B,EAACZ,cAAD,EAA/B,EAAyCa,KAAzC,EAA1B;AACI;AAAA;AAAA,sBAAK,OAAO,EAACnB,cAAD,EAAZ,EAAsB,WAAWJ,GAAG,KAAKG,KAAR,EAAeoB,KAAf,EAAjC;AACI,8DAAK,OAAOV,WAAZ,EAAyB,WAAWb,KAAKqB,IAAL,CAAU,QAAV,EAAoBE,KAApB,EAApC,GADJ;AAEI;AACI,iCAAShB,KADb;AAEI,yDAAQiB,MAAMZ,OAAd,IAA0BG,YAA1B,CAFJ;AAGI,mCAAWf,KAAKqB,IAAL,CAAU,SAAV,EAAqBE,KAArB,EAHf,GAFJ;AAMKf,yCACK,IADL,GAEK;AACE,yDAAQgB,MAAMZ,OAAd,IAA0BI,iBAA1B,CADF;AAEE,mCAAWhB,KAAKqB,IAAL,CAAU,eAAV,EAA2BE,KAA3B,EAFb;AARV;AADJ,aADJ;AAiBH,S;;;;;yBA1DgBtB,S;;;AA8DrBA,cAAUwB,WAAV,GAAwB,WAAxB;;AAEAxB,cAAUyB,SAAV,GAAsB;AAClBZ,eAAO,iBAAUa,SAAV,CAAoB,CAAC,iBAAUC,MAAX,EAAmB,iBAAUC,MAA7B,CAApB,CADW;AAElBzB,gBAAQ,iBAAUuB,SAAV,CAAoB,CAAC,iBAAUC,MAAX,EAAmB,iBAAUC,MAA7B,CAApB,CAFU;AAGlBxB,iBAAS,iBAAUuB,MAHD;AAIlBtB,iBAAS,iBAAUsB,MAJD;AAKlBpB,4BAAoB,iBAAUsB;AALZ,KAAtB;;AAQA7B,cAAU8B,YAAV,GAAyB;AACrB3B,gBAAQ,CADa;AAErBU,eAAO,MAFc;AAGrBN,4BAAoB;AAHC,KAAzB","file":"Bar.js","sourcesContent":["/**\n * @file Slider/SliderBar\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Tooltip from '../Tooltip';\n\nconst cx = create('SliderBar');\n\nexport default class SliderBar extends Component {\n\n    render() {\n\n        const {\n            height,\n            maximum,\n            minimum,\n            value,\n            disableFocusRipple,\n            pointerSize,\n            active,\n            ...rest\n        } = this.props;\n\n        const percent = ((value - minimum) / (maximum - minimum) * 100) + '%';\n\n        const activeStyle = {\n            width: percent\n        };\n\n        let pointerStyle = {};\n        let outerPointerStyle = {};\n\n        if (pointerSize) {\n            pointerStyle.width = pointerStyle.height = pointerSize;\n\n            if (typeof pointerSize === 'string') {\n                const unit = pointerSize.replace(/\\d(\\.)?\\d*/, '');\n                const value = parseFloat(pointerSize);\n                outerPointerStyle.width = outerPointerStyle.height = (value * 2) + unit;\n                outerPointerStyle.marginTop = (-value) + unit;\n                pointerStyle.marginTop = (-value / 2) + unit;\n            }\n            else {\n                outerPointerStyle.width = outerPointerStyle.height = pointerSize * 2;\n                outerPointerStyle.marginTop = -pointerSize;\n                pointerStyle.marginTop = -pointerSize / 2;\n            }\n        }\n\n        return (\n            <div {...rest} className={cx().part('wrapper').addStates({active}).build()}>\n                <div style={{height}} className={cx(this.props).build()}>\n                    <div style={activeStyle} className={cx().part('active').build()} />\n                    <Tooltip\n                        content={value}\n                        style={{left: percent, ...pointerStyle}}\n                        className={cx().part('pointer').build()} />\n                    {disableFocusRipple\n                        ? null\n                        : <div\n                            style={{left: percent, ...outerPointerStyle}}\n                            className={cx().part('pointer-outer').build()} />\n                    }\n                </div>\n            </div>\n        );\n    }\n\n}\n\nSliderBar.displayName = 'SliderBar';\n\nSliderBar.propTypes = {\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    maximum: PropTypes.number,\n    minimum: PropTypes.number,\n    disableFocusRipple: PropTypes.bool\n};\n\nSliderBar.defaultProps = {\n    height: 2,\n    width: '100%',\n    disableFocusRipple: false\n};\n"]}