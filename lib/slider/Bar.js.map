{"version":3,"sources":["slider/Bar.js"],"names":["cx","SliderBar","render","props","height","maximum","minimum","value","disableFocusRipple","pointerSize","active","states","variants","rest","percent","activeStyle","width","pointerStyle","outerPointerStyle","unit","replace","parseFloat","marginTop","className","part","addVariants","addStates","build","left","displayName","propTypes","oneOfType","number","string","bool","defaultProps"],"mappings":"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","file":"Bar.js","sourcesContent":["/**\n * @file Slider/SliderBar\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nimport Tooltip from '../Tooltip';\n\nconst cx = create('SliderBar');\n\nexport default class SliderBar extends Component {\n\n    render() {\n\n        const {\n            height,\n            maximum,\n            minimum,\n            value,\n            disableFocusRipple,\n            pointerSize,\n            active,\n            states,\n            variants,\n            ...rest\n        } = this.props;\n\n        const percent = ((value - minimum) / (maximum - minimum) * 100) + '%';\n\n        const activeStyle = {\n            width: percent\n        };\n\n        let pointerStyle = {};\n        let outerPointerStyle = {};\n\n        if (pointerSize) {\n            pointerStyle.width = pointerStyle.height = pointerSize;\n\n            if (typeof pointerSize === 'string') {\n                const unit = pointerSize.replace(/\\d(\\.)?\\d*/, '');\n                const value = parseFloat(pointerSize);\n                outerPointerStyle.width = outerPointerStyle.height = (value * 2) + unit;\n                outerPointerStyle.marginTop = (-value) + unit;\n                pointerStyle.marginTop = (-value / 2) + unit;\n            }\n            else {\n                outerPointerStyle.width = outerPointerStyle.height = pointerSize * 2;\n                outerPointerStyle.marginTop = -pointerSize;\n                pointerStyle.marginTop = -pointerSize / 2;\n            }\n        }\n\n        const className = cx()\n            .part('wrapper')\n            .addVariants(variants)\n            .addStates({...states, active})\n            .build();\n\n        return (\n            <div {...rest} className={className}>\n                <div style={{height}} className={cx(this.props).build()}>\n                    <div style={activeStyle} className={cx().part('active').build()} />\n                    <Tooltip\n                        content={value}\n                        style={{left: percent, ...pointerStyle}}\n                        className={cx().part('pointer').build()} />\n                    {disableFocusRipple\n                        ? null\n                        : <div\n                            style={{left: percent, ...outerPointerStyle}}\n                            className={cx().part('pointer-outer').build()} />\n                    }\n                </div>\n            </div>\n        );\n    }\n\n}\n\nSliderBar.displayName = 'SliderBar';\n\nSliderBar.propTypes = {\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    maximum: PropTypes.number,\n    minimum: PropTypes.number,\n    disableFocusRipple: PropTypes.bool\n};\n\nSliderBar.defaultProps = {\n    height: 2,\n    width: '100%',\n    disableFocusRipple: false\n};\n"]}