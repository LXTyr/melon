{"version":3,"sources":["Toggle.js"],"names":["cx","Toggle","props","context","onChange","bind","e","disabled","readOnly","trueValue","falseValue","type","target","value","checked","render","state","name","addStates","build","part","displayName","defaultProps","propTypes","any","isRequired","childContextTypes","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAYA,QAAMA,KAAK,uBAAO,QAAP,CAAX;;AAEA;;;;;;;QAMqBC,M;;;AAEjB;;;;;;;;AAQA,wBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,qEAExB,2BAAMD,KAAN,EAAaC,OAAb,CAFwB;;AAIxB,kBAAKC,QAAL,GAAgB,MAAKA,QAAL,CAAcC,IAAd,OAAhB;;AAJwB;AAM3B;;AAED;;;;;;;;yBAMAD,Q,qBAASE,C,EAAG;AAAA,yBAOJ,KAAKJ,KAPD;AAAA,gBAGJK,QAHI,UAGJA,QAHI;AAAA,gBAIJC,QAJI,UAIJA,QAJI;AAAA,gBAKJC,SALI,UAKJA,SALI;AAAA,gBAMJC,UANI,UAMJA,UANI;;;AASR,gBAAIH,YAAYC,QAAhB,EAA0B;AACtB;AACH;;AAED,sCAAMJ,QAAN,YAAe;AACXO,sBAAM,QADK;AAEXC,wBAAQ,IAFG;AAGXC,uBAAOP,EAAEM,MAAF,CAASE,OAAT,GAAmBL,SAAnB,GAA+BC;AAH3B,aAAf;AAMH,S;;yBAQDK,M,qBAAS;AAAA,gBAGDb,KAHC,GAMD,IANC,CAGDA,KAHC;AAAA,gBAIDc,KAJC,GAMD,IANC,CAIDA,KAJC;AAAA,gBAKDZ,QALC,GAMD,IANC,CAKDA,QALC;;;AAQL,gBAAMS,QAAQG,MAAMH,KAApB;;AARK,gBAWDI,IAXC,GAcDf,KAdC,CAWDe,IAXC;AAAA,gBAYDR,SAZC,GAcDP,KAdC,CAYDO,SAZC;AAAA,gBAaDF,QAbC,GAcDL,KAdC,CAaDK,QAbC;;;AAgBL,gBAAMO,UAAUD,UAAUJ,SAA1B;;AAEA,mBACI;AAAA;AAAA,kBAAO,WAAWT,GAAGE,KAAH,EAAUgB,SAAV,CAAoB,EAACJ,gBAAD,EAApB,EAA+BK,KAA/B,EAAlB;AACI;AACI,0BAAK,UADT;AAEI,0BAAMF,IAFV;AAGI,2BAAOJ,KAHX;AAII,8BAAUT,QAJd;AAKI,6BAASU,OALb,GADJ;AAOI;AAAA;AAAA,sBAAK,WAAWd,KAAKoB,IAAL,CAAU,eAAV,EAA2BD,KAA3B,EAAhB;AACI,8DAAK,WAAWnB,KAAKoB,IAAL,CAAU,KAAV,EAAiBD,KAAjB,EAAhB,GADJ;AAEI;AAAA;AAAA,0BAAK,WAAWnB,KAAKoB,IAAL,CAAU,QAAV,EAAoBD,KAApB,EAAhB;AACKZ,mCACK,IADL,GAEK,8DAAc,MAAMO,OAApB,EAA6B,OAAO,GAApC,EAAyC,SAAS,GAAlD;AAHV;AAFJ;AAPJ,aADJ;AAmBH,S;;;;;yBAxFgBb,M;;;AA4FrBA,WAAOoB,WAAP,GAAqB,QAArB;;AAEApB,WAAOqB,YAAP,+BACO,4BAAeA,YADtB;AAEIb,mBAAW,IAFf;AAGIC,oBAAY;AAHhB;;AAMAT,WAAOsB,SAAP,+BACO,4BAAeA,SADtB;AAEId,mBAAW,iBAAUe,GAAV,CAAcC;AAF7B;;AAKAxB,WAAOyB,iBAAP,GAA2B,4BAAeA,iBAA1C;AACAzB,WAAO0B,YAAP,GAAsB,4BAAeA,YAArC","file":"Toggle.js","sourcesContent":["/**\n * @file melon/Toggle\n * @author cxtom<cxtom2008@gmail.com>\n * @author leon<ludafa@outlook.com>\n */\n\n\nimport React, {PropTypes} from 'react';\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport CenterRipple from './ripples/CenterRipple';\n\nconst cx = create('Toggle');\n\n/**\n * melon/Toggle\n *\n * @extends {melon-core/InputComponent}\n * @class\n */\nexport default class Toggle extends InputComponent {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     * @param  {*} context 上下文\n     */\n    constructor(props, context) {\n\n        super(props, context);\n\n        this.onChange = this.onChange.bind(this);\n\n    }\n\n    /**\n     * 值改变处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onChange(e) {\n\n        const {\n            disabled,\n            readOnly,\n            trueValue,\n            falseValue\n        } = this.props;\n\n        if (disabled || readOnly) {\n            return;\n        }\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: e.target.checked ? trueValue : falseValue\n        });\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        const {\n            props,\n            state,\n            onChange\n        } = this;\n\n        const value = state.value;\n\n        const {\n            name,\n            trueValue,\n            disabled\n        } = props;\n\n        const checked = value === trueValue;\n\n        return (\n            <label className={cx(props).addStates({checked}).build()}>\n                <input\n                    type=\"checkbox\"\n                    name={name}\n                    value={value}\n                    onChange={onChange}\n                    checked={checked} />\n                <div className={cx().part('bar-container').build()}>\n                    <div className={cx().part('bar').build()} />\n                    <div className={cx().part('circle').build()}>\n                        {disabled\n                            ? null\n                            : <CenterRipple flag={checked} scale={2.5} opacity={0.3} />}\n                    </div>\n                </div>\n            </label>\n        );\n\n    }\n\n}\n\nToggle.displayName = 'Toggle';\n\nToggle.defaultProps = {\n    ...InputComponent.defaultProps,\n    trueValue: 'on',\n    falseValue: ''\n};\n\nToggle.propTypes = {\n    ...InputComponent.propTypes,\n    trueValue: PropTypes.any.isRequired\n};\n\nToggle.childContextTypes = InputComponent.childContextTypes;\nToggle.contextTypes = InputComponent.contextTypes;\n"]}