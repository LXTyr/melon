{"version":3,"sources":["Tabs.js"],"names":["cx","Tabs","props","selectedIndex","state","onTabClick","bind","componentWillReceiveProps","setState","index","onChange","type","target","getTabCount","count","children","isTabSelected","render","tabIndex","percent","tabContents","tabs","variants","states","rest","toArray","i","len","length","tab","selected","push","key","style","width","onClick","InkBarStyles","left","className","addVariants","addStates","build","getPartClassName","propTypes","number","isRequired","func","defaultProps","Tab","TabPanel","default"],"mappings":"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","file":"Tabs.js","sourcesContent":["/**\n * @file melon/Tabs\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes, cloneElement, Children} from  'react';\nimport Tab from './tabs/Tab';\nimport TabPanel from  './tabs/Panel';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport omit from 'lodash/omit';\n\nconst cx = create('Tabs');\n\n/**\n * melon/Tabs\n *\n * @extends {React.Component}\n * @class\n */\nclass Tabs extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param {*} props 属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        const selectedIndex = props.selectedIndex;\n\n        /**\n         * 状态\n         *\n         * @private\n         * @type {Object}\n         */\n        this.state = {\n            selectedIndex\n        };\n\n        this.onTabClick = this.onTabClick.bind(this);\n\n    }\n\n    /**\n     * 接受新属性时的处理\n     *\n     * @public\n     * @override\n     */\n    componentWillReceiveProps({selectedIndex}) {\n\n        if (selectedIndex !== this.state.selectedIndex) {\n            this.setState({\n                selectedIndex\n            });\n        }\n    }\n\n    /**\n     * 处理 Tab 点击事件\n     *\n     * @private\n     * @param {number} index tab 序号\n     */\n    onTabClick(index) {\n\n        if (index === this.state.selectedIndex) {\n            return;\n        }\n\n        let onChange = this.props.onChange;\n\n        this.setState({selectedIndex: index}, () => {\n            onChange && onChange({\n                type: 'change',\n                selectedIndex: index,\n                target: this\n            });\n        });\n\n    }\n\n    /**\n     * 获取 Tab 总数\n     *\n     * @protected\n     * @return {number}\n     */\n    getTabCount() {\n        return Children.count(this.props.children);\n    }\n\n    /**\n     * 指定序号的标签是否被选中\n     *\n     * @protected\n     * @param {number} index 序号\n     * @return {boolean}\n     */\n    isTabSelected(index) {\n        return this.state.selectedIndex === index;\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        let props = this.props;\n        let tabIndex = 0;\n        let percent = 1 / this.getTabCount() * 100 + '%';\n        let tabContents = [];\n        let tabs = [];\n\n        let {\n            variants,\n            states,\n            children,\n            ...rest\n        } = props;\n\n        children = Children.toArray(props.children);\n\n        let selectedIndex = this.state.selectedIndex;\n\n        for (let i = 0, len = children.length; i < len; ++i) {\n\n            let tab = children[i];\n\n            let selected = selectedIndex === i;\n\n            if (selected) {\n                tabIndex = i;\n            }\n\n            if (children) {\n                tabContents.push(\n                    <TabPanel key={i} active={selected}>\n                        {tab.props.children}\n                    </TabPanel>\n                );\n            }\n\n            tabs.push(\n                cloneElement(\n                    tab,\n                    {\n                        key: i,\n                        selected: selected,\n                        index: i,\n                        style: {width: percent},\n                        onClick: this.onTabClick\n                    }\n                )\n            );\n\n        }\n\n        const InkBarStyles = {\n            width: percent,\n            left: 'calc(' + percent + '*' + tabIndex + ')'\n        };\n\n        const className = cx()\n            .addVariants(variants)\n            .addStates(states)\n            .build();\n\n        return (\n            <div\n                {...omit(rest, ['selectedIndex'])}\n                className={className}>\n                <ul>\n                    {tabs}\n                    <li\n                        className={cx.getPartClassName('inkbar')}\n                        style={InkBarStyles} />\n                </ul>\n                {tabContents}\n            </div>\n        );\n\n    }\n\n}\n\n/**\n * propTypes\n *\n * @property {number}   selectedIndex  选中标签的序号\n * @property {Function} onChange       选中标签发生变化后处理函数\n * @property {Function} onBeforeChange 选中标签发生变化前处理函数\n */\nTabs.propTypes = {\n    selectedIndex: PropTypes.number.isRequired,\n    onChange: PropTypes.func\n};\n\nTabs.defaultProps = {\n    selectedIndex: 0\n};\n\nTabs.Tab = Tab;\nTabs.TabPanel = TabPanel;\n\nexport {\n    Tabs as default,\n    Tab,\n    TabPanel\n};\n"]}