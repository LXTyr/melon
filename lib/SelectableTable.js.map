{"version":3,"sources":["SelectableTable.js"],"names":["getNextSelectedRowData","multiple","dataSource","current","action","rowIndex","map","_","index","selected","concat","sort","filter","row","SelectableTable","props","getSelected","bind","isAllRowsSelected","isRowSelected","onSelect","onSelectAll","state","componentWillReceiveProps","setState","onRowSelectorClick","target","source","selectedRows","indexOf","length","getColumns","selectorColumn","columns","renderRow","part","rowData","tableWidth","rowHeight","headerRowHeight","highlight","rowHasChanged","displayName","propTypes","bool","isRequired","func","arrayOf","number","defaultProps"],"mappings":"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","file":"SelectableTable.js","sourcesContent":["/**\n * @file SelectableTable\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes} from 'react';\nimport Table from './Table';\nimport SelectorColumn from './table/SelectorColumn';\nimport SelectorRow from './table/SelectorRow';\n\nfunction getNextSelectedRowData(multiple, dataSource, current, action, rowIndex) {\n\n    if (!multiple) {\n        return [rowIndex];\n    }\n\n    if (action === 'selectAll') {\n        return dataSource.map((_, index) => index);\n    }\n\n    if (action === 'unselectAll') {\n        return [];\n    }\n\n    let selected = action === 'select'\n        ? current.concat(rowIndex).sort()\n        : current.filter(function (row) {\n            return row !== rowIndex;\n        });\n\n    return selected;\n\n}\n\n/**\n * 可选择行的表格\n *\n * @extends {Table}\n */\nexport default class SelectableTable extends Table {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @param  {*} props 属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.getSelected = this.getSelected.bind(this);\n        this.isAllRowsSelected = this.isAllRowsSelected.bind(this);\n        this.isRowSelected = this.isRowSelected.bind(this);\n        this.onSelect = this.onSelect.bind(this);\n        this.onSelectAll = this.onSelectAll.bind(this);\n\n        this.state = {\n            ...this.state,\n            selected: this.props.selected\n        };\n\n    }\n\n    /**\n     * 接受新属性时处理函数\n     *\n     * @public\n     * @param  {*} props 新属性\n     */\n    componentWillReceiveProps(props) {\n\n        super.componentWillReceiveProps(props);\n\n        const {selected, onSelect} = props;\n\n        if (onSelect && selected != null) {\n            this.setState({\n                selected\n            });\n        }\n\n    }\n\n    /**\n     * 当某行被选中时处理函数\n     *\n     * @private\n     * @param  {number} rowIndex 行号\n     */\n    onSelect(rowIndex) {\n        this.onRowSelectorClick(\n            this.isRowSelected(rowIndex) ? 'unselect' : 'select',\n            rowIndex\n        );\n    }\n\n    /**\n     * 当『选择全部』被点击时的处理函数\n     *\n     * @private\n     */\n    onSelectAll() {\n        this.onRowSelectorClick(\n            this.isAllRowsSelected() ? 'unselectAll' : 'selectAll'\n        );\n    }\n\n    /**\n     * 当某行中的选择器被点击时的处理函数\n     *\n     * @private\n     * @param  {string} action   动作\n     * @param  {number} rowIndex 行号\n     */\n    onRowSelectorClick(action, rowIndex) {\n\n        const {\n            onSelect,\n            dataSource,\n            multiple\n        } = this.props;\n\n        let selected = this.getSelected();\n\n        selected = getNextSelectedRowData(\n            multiple,\n            dataSource,\n            selected,\n            action,\n            rowIndex\n        );\n\n        if (onSelect) {\n            onSelect({\n                selected,\n                target: this\n            });\n            return;\n        }\n\n        this.setState({\n            selected\n        });\n\n    }\n\n    /**\n     * 获取当前选中行号\n     *\n     * @protected\n     * @return {Array.number}\n     */\n    getSelected() {\n        const source = this.props.onSelect ? this.props : this.state;\n        return source.selected;\n    }\n\n    /**\n     * 指定行号是否被选中\n     *\n     * @public\n     * @param  {number}  rowIndex 行号\n     * @return {boolean}\n     */\n    isRowSelected(rowIndex) {\n        const selectedRows = this.getSelected();\n        return selectedRows.indexOf(rowIndex) !== -1;\n    }\n\n    /**\n     * 是否全部被选中\n     *\n     * @public\n     * @return {boolean}\n     */\n    isAllRowsSelected() {\n        const selectedRows = this.getSelected();\n        return selectedRows.length === this.props.dataSource.length;\n    }\n\n    /**\n     * 从属性中解析出列配置\n     *\n     * @protected\n     * @param  {*} props 属性\n     * @return {Array.Element}\n     */\n    getColumns(props) {\n\n        const selectorColumn = (\n            <SelectorColumn\n                isSelected={this.isRowSelected}\n                isAllSelected={this.isAllRowsSelected}\n                multiple={props.multiple}\n                onSelect={this.onSelect}\n                onSelectAll={this.onSelectAll} />\n        );\n\n        const columns = super.getColumns(props);\n\n        return [selectorColumn, ...columns];\n\n    }\n\n    /**\n     * 渲染一行\n     *\n     * @protected\n     * @param  {string}        part       位置\n     * @param  {Array.Element} columns    列配置\n     * @param  {*}             rowData    行数据\n     * @param  {number}        index      行号\n     * @param  {number}        tableWidth 表格宽度\n     * @return {Element}\n     */\n    renderRow(part, columns, rowData, index, tableWidth) {\n        const {rowHeight, headerRowHeight, highlight, rowHasChanged} = this.props;\n        return (\n            <SelectorRow\n                selected={part === 'body' ? this.isRowSelected(index) : this.isAllRowsSelected()}\n                height={part === 'body' ? rowHeight : headerRowHeight}\n                highlight={highlight}\n                key={index}\n                rowIndex={index}\n                part={part}\n                columns={columns}\n                data={rowData}\n                tableWidth={tableWidth}\n                rowHasChanged={rowHasChanged} />\n        );\n    }\n\n}\n\nSelectableTable.displayName = 'SelectableTable';\n\nSelectableTable.propTypes = {\n    ...Table.propTypes,\n    multiple: PropTypes.bool.isRequired,\n    onSelect: PropTypes.func,\n    selected: PropTypes.arrayOf(PropTypes.number).isRequired\n};\n\nSelectableTable.defaultProps = {\n    ...Table.defaultProps,\n    multiple: true,\n    selected: []\n};\n"]}