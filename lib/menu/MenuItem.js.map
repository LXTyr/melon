{"version":3,"sources":["menu/MenuItem.js"],"names":["cx","MenuItem","props","context","state","onClick","bind","e","type","checked","disabled","radioGroup","onClose","stopPropagation","renderIconPlaceHolder","getPartClassName","renderIcon","icon","render","hotKey","label","indent","cascading","className","addVariants","build","propTypes","bool","oneOfType","string","element","func","propName","componentName","children","Error","defaultProps"],"mappings":"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","file":"MenuItem.js","sourcesContent":["/**\n * @file MenuItem\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {PureComponent} from 'react';\nimport PropTypes from 'prop-types';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from '../Icon';\nimport TouchRipple from '../ripples/TouchRipple';\n\nconst cx = create('MenuItem');\n\nexport default class MenuItem extends PureComponent {\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {};\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(e) {\n\n        let {\n            type,\n            checked,\n            disabled,\n            radioGroup,\n            onClick,\n            onClose\n        } = this.props;\n\n        e.stopPropagation();\n\n        if (disabled) {\n            return;\n        }\n\n        if (onClick) {\n\n            switch (type) {\n                case 'radio':\n                    onClick({\n                        checked: true,\n                        radioGroup\n                    });\n                    break;\n                case 'checkbox':\n                    onClick({checked: !checked});\n                    break;\n                default:\n                    onClick();\n                    break;\n            }\n\n        }\n\n        onClose && onClose();\n\n    }\n\n    renderIconPlaceHolder() {\n        return (\n            <b className={cx.getPartClassName('icon-placeholder')} />\n        );\n    }\n\n    renderIcon(icon) {\n        return typeof icon === 'string'\n            ? <Icon icon={icon} className={cx.getPartClassName('left-icon')} />\n            : icon;\n    }\n\n    render() {\n\n        let {\n            hotKey,\n            icon,\n            label,\n            type,\n            checked,\n            disabled,\n            indent,\n            cascading\n        } = this.props;\n\n        let className = cx(this.props)\n            .addVariants({cascading})\n            .build();\n\n        if (type !== 'command' && checked) {\n            icon = 'check';\n        }\n\n        icon = icon\n            ? this.renderIcon(icon)\n            : indent && this.renderIconPlaceHolder();\n\n        return (\n            <div className={className} onClick={this.onClick}>\n                {icon}\n                <span className={cx.getPartClassName('label')}>{label}</span>\n                {hotKey}\n                {disabled ? null : <TouchRipple />}\n            </div>\n        );\n\n    }\n\n}\n\nMenuItem.propTypes = {\n\n    /**\n     * 是否有 icon 缩进\n     *\n     * @protected\n     * @type {boolean?}\n     */\n    indent: PropTypes.bool,\n\n    /**\n     * 是否为级联\n     *\n     * @protected\n     * @type {boolean?}\n     */\n    cascading: PropTypes.bool,\n\n    /**\n     * 左侧 icon\n     *\n     * @type {(string|ReactElement)?}\n     */\n    icon: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n    /**\n     * 是否为已选中\n     *\n     * @type {boolean?}\n     */\n    checked: PropTypes.bool,\n\n    /**\n     * 是否禁用\n     *\n     * @type {boolean?}\n     */\n    disabled: PropTypes.bool,\n\n    /**\n     * 点击回调函数\n     *\n     * @type {Function?}\n     */\n    onClick: PropTypes.func,\n\n\n    label(props, propName, componentName) {\n        if (!props.label && !props.children) {\n            return new Error(`${componentName} must have 'label' or 'children'.`);\n        }\n    },\n\n    type(props, propName, componentName) {\n\n        if (props[propName] === 'radio') {\n            if (!props.radioGroup) {\n                return new Error(`${componentName} needs '${propName}' to be set along with prop 'radioGroup'`);\n            }\n        }\n\n    },\n\n    hotKey: PropTypes.string\n\n};\n\nMenuItem.defaultProps = {\n    type: 'command'\n};\n"]}