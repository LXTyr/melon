{"version":3,"sources":["dialog/DialogWindow.js"],"names":["cx","DialogWindow","shouldComponentUpdate","nextProps","top","props","width","footer","title","render","children","others","style","transform","WebkitTransform","msTransform","MozTransform","isNaN","build","propTypes","number","isRequired","element"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;AAQA,QAAMA,KAAK,uBAAO,cAAP,CAAX;;QAEqBC,Y;;;;;;;;+BAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAOA,UAAUC,GAAV,KAAkB,KAAKC,KAAL,CAAWD,GAA7B,IACAD,UAAUG,KAAV,KAAoB,KAAKD,KAAL,CAAWC,KAD/B,IAEAH,UAAUI,MAAV,KAAqB,KAAKF,KAAL,CAAWE,MAFhC,IAGAJ,UAAUK,KAAV,KAAoB,KAAKH,KAAL,CAAWG,KAHtC;AAIH,S;;+BAEDC,M,qBAAS;AAAA,yBASD,KAAKJ,KATJ;AAAA,gBAGDK,QAHC,UAGDA,QAHC;AAAA,gBAIDN,GAJC,UAIDA,GAJC;AAAA,gBAKDI,KALC,UAKDA,KALC;AAAA,gBAMDD,MANC,UAMDA,MANC;AAAA,gBAODD,KAPC,UAODA,KAPC;AAAA,gBAQEK,MARF;;;AAWL,gBAAIC,QAAQ;AACRC,2BAAW,kBAAkBT,GAAlB,GAAwB,KAD3B;AAERU,iCAAiB,kBAAkBV,GAAlB,GAAwB,KAFjC;AAGRW,6BAAa,kBAAkBX,GAAlB,GAAwB,KAH7B;AAIRY,8BAAc,kBAAkBZ,GAAlB,GAAwB;AAJ9B,aAAZ;;AAOA,gBAAIA,QAAQ,CAAZ,EAAe;AACXQ,wBAAQ,EAAR;AACH;;AAED,gBAAI,OAAON,KAAP,KAAiB,QAAjB,IAA6B,CAACW,MAAM,CAACX,KAAP,CAAlC,EAAiD;AAC7CM,sBAAMN,KAAN,GAAiBA,KAAjB;AACH;;AAED,mBACI;AAAA;AAAA,4CAASK,MAAT,IAAiB,OAAOC,KAAxB,EAA+B,WAAWZ,GAAG,KAAKK,KAAR,EAAea,KAAf,EAA1C;AACKV,qBADL;AACYE,wBADZ;AACsBH;AADtB,aADJ;AAKH,S;;;;;yBAxCgBN,Y;;;AA4CrBA,iBAAakB,SAAb,GAAyB;AACrBf,aAAK,iBAAUgB,MAAV,CAAiBC,UADD;AAErBd,gBAAQ,iBAAUe,OAFG;AAGrBd,eAAO,iBAAUc;AAHI,KAAzB","file":"DialogWindow.js","sourcesContent":["/**\n * @file melon/Dialog/DialogWindow\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nconst cx = create('DialogWindow');\n\nexport default class DialogWindow extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps.top !== this.props.top\n            || nextProps.width !== this.props.width\n            || nextProps.footer !== this.props.footer\n            || nextProps.title !== this.props.title;\n    }\n\n    render() {\n\n        const {\n            children,\n            top,\n            title,\n            footer,\n            width,\n            ...others\n        } = this.props;\n\n        let style = {\n            transform: 'translate(0, ' + top + 'px)',\n            WebkitTransform: 'translate(0, ' + top + 'px)',\n            msTransform: 'translate(0, ' + top + 'px)',\n            MozTransform: 'translate(0, ' + top + 'px)'\n        };\n\n        if (top === 0) {\n            style = {};\n        }\n\n        if (typeof width === 'number' || !isNaN(+width)) {\n            style.width = `${width}px`;\n        }\n\n        return (\n            <div {...others} style={style} className={cx(this.props).build()}>\n                {title}{children}{footer}\n            </div>\n        );\n    }\n\n}\n\nDialogWindow.propTypes = {\n    top: PropTypes.number.isRequired,\n    footer: PropTypes.element,\n    title: PropTypes.element\n};\n"]}