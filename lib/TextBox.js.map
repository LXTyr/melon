{"version":3,"sources":["TextBox.js"],"names":["cx","TextBox","props","context","value","state","isFloating","isFocus","onFocus","bind","onBlur","onChange","componentWillReceiveProps","nextProps","multiline","syncTextareaHeight","nextIsFloating","setState","componentDidMount","e","type","target","needValidate","validate","input","style","height","scrollHeight","eventName","validateEvents","indexOf","renderFloatingLabel","floatingLabel","render","rest","validity","statefulClassName","addStates","focus","floating","fulfilled","getStyleStates","build","findDOMNode","displayName","defaultProps","propTypes","oneOf","placeholder","string","bool","func","childContextTypes","contextTypes"],"mappings":"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","file":"TextBox.js","sourcesContent":["/**\n * @file TextBox\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport FloatingLabel from './textbox/FloatLabel';\nimport TextBoxInput from './textbox/Input';\nimport Validity from 'melon-core/Validity';\nimport InputComponent from 'melon-core/InputComponent';\n\nimport {create} from 'melon-core/classname/cxBuilder';\n\nconst cx = create('TextBox');\n\n/**\n * melon/TextBox\n *\n * @extends {melon-core/InputComponent}\n * @class\n */\nexport default class TextBox extends InputComponent {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     * @param  {*} context 上下文\n     */\n    constructor(props, context) {\n\n        super(props, context);\n\n        const value = this.state.value;\n\n        /**\n         * 状态\n         *\n         * @protected\n         * @type {Object}\n         */\n        this.state = {\n            ...this.state,\n            isFloating: !!value,\n            isFocus: false\n        };\n\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onChange = this.onChange.bind(this);\n\n\n    }\n\n    /**\n     * 接受新属性时的处理\n     *\n     * @public\n     * @override\n     * @param {*} nextProps 新属性\n     */\n    componentWillReceiveProps(nextProps) {\n\n        const value = nextProps.value;\n\n        // 多行文本框应该可以自动更新高度\n        if (nextProps.multiline && this.state.value !== value) {\n            this.syncTextareaHeight();\n        }\n\n        const {\n            isFloating,\n            isFocus\n        } = this.state;\n\n        const nextIsFloating = !!value || isFocus;\n\n        if (isFloating !== nextIsFloating) {\n            this.setState({\n                isFloating: nextIsFloating\n            });\n        }\n\n        super.componentWillReceiveProps(nextProps);\n\n    }\n\n    /**\n     * Mount时的处理\n     *\n     * @public\n     * @override\n     */\n    componentDidMount() {\n\n        super.componentDidMount();\n\n        if (this.props.multiline && this.state.value) {\n            this.syncTextareaHeight();\n        }\n\n    }\n\n    /**\n     * 获取焦点时处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onFocus(e) {\n\n        this.setState({\n            isFocus: true,\n            isFloating: true\n        });\n\n        const onFocus = this.props.onFocus;\n\n        if (onFocus)  {\n            onFocus({\n                type: 'focus',\n                target: this\n            });\n            return;\n        }\n\n        if (this.needValidate('focus')) {\n            this.validate(this.state.value);\n        }\n\n    }\n\n    /**\n     * 失去焦点时处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onBlur(e) {\n\n        const value = e.target.value;\n\n        this.setState({\n            isFloating: !!value,\n            isFocus: false\n        });\n\n        const onBlur = this.props.onBlur;\n\n        if (onBlur)  {\n            onBlur({\n                type: 'blur',\n                target: this\n            });\n            return;\n        }\n\n        this.setState({value});\n\n\n        if (this.needValidate('blur')) {\n            this.validate(value);\n        }\n\n    }\n\n    /**\n     * 值改变时处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onChange(e) {\n\n        super.onChange({\n            type: 'change',\n            target: this,\n            value: e.target.value\n        });\n\n    }\n\n    /**\n     * 多行时同步输入框高度\n     *\n     * @protected\n     */\n    syncTextareaHeight() {\n\n        const input = this.input;\n\n        if (input) {\n            input.style.height = 'auto';\n            input.style.height = input.scrollHeight + 'px';\n        }\n\n    }\n\n    /**\n     * 是否需要校验\n     *\n     * @private\n     * @param {number} eventName 事件名称\n     * @return {boolean} 是否需要校验\n     */\n    needValidate(eventName) {\n        return this.props.validateEvents.indexOf(eventName) !== -1;\n    }\n\n    /**\n     * 渲染浮动标签\n     *\n     * @protected\n     * @param  {string}  floatingLabel 标签内容\n     * @param  {boolean} isFloating    是否浮动\n     * @param  {boolean} isFocus       是否获取焦点\n     * @return {?ReactElement}\n     */\n    renderFloatingLabel(floatingLabel, isFloating, isFocus) {\n\n        if (!floatingLabel) {\n            return null;\n        }\n\n        return (\n            <FloatingLabel\n                floating={isFloating || isFocus}\n                focused={isFocus}\n                label={floatingLabel} />\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        const {\n            onFocus,\n            onBlur,\n            onChange,\n            props\n        } = this;\n\n        const {\n            floatingLabel,\n            ...rest\n        } = props;\n\n        const {\n            validity,\n            isFocus,\n            isFloating,\n            value\n        } = this.state;\n\n        const statefulClassName = cx(props)\n            .addStates({\n                focus: isFocus,\n                floating: isFloating,\n                fulfilled: !!value\n            })\n            .addStates(this.getStyleStates())\n            .build();\n\n        return (\n            <div className={statefulClassName}>\n                {this.renderFloatingLabel(floatingLabel, isFloating, isFocus)}\n                <TextBoxInput\n                    {...rest}\n                    onFocus={onFocus}\n                    onBlur={onBlur}\n                    onChange={onChange}\n                    isFocus={isFocus}\n                    value={value}\n                    ref={input => {\n                        if (input) {\n                            this.input = ReactDOM.findDOMNode(input);\n                        }\n                    }} />\n                <Validity validity={validity} />\n            </div>\n        );\n\n    }\n\n\n\n}\n\nTextBox.displayName = 'TextBox';\n\nTextBox.defaultProps = {\n    ...InputComponent.defaultProps,\n    validateEvents: ['change', 'blur']\n};\n\nTextBox.propTypes = {\n\n    ...InputComponent.propTypes,\n\n    type: PropTypes.oneOf(['text', 'password', 'number']),\n\n    placeholder: PropTypes.string,\n    floatingLabel: PropTypes.string,\n\n    multiline: PropTypes.bool,\n\n    onFocus: PropTypes.func,\n    onBlur: PropTypes.func\n\n};\n\nTextBox.childContextTypes = InputComponent.childContextTypes;\nTextBox.contextTypes = InputComponent.contextTypes;\n"]}