{"version":3,"sources":["ScrollView.js"],"names":["cx","DIRECTIONS","vertical","horizontal","SIZES","ScrollView","props","thumbSize","timer","onWheel","bind","state","position","componentDidMount","updateContentSize","setState","componentDidUpdate","refs","main","content","getDirections","forEach","contentSize","key","mainSize","Math","round","top","style","onAction","direction","e","action","pos","setScrollPercent","directions","wheelSpeed","current","name","percent","preventDefault","length","Object","keys","onScroll","target","renderScrollBar","map","dir","index","size","render","children","others","height","width","addVariants","build","part","displayName","propTypes","oneOf","number","func","defaultProps"],"mappings":"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","file":"ScrollView.js","sourcesContent":["/**\n * @file melon/ScrollView\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport Bar from './scrollview/Bar';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nconst cx = create('scrollview');\n\nconst DIRECTIONS = {\n    vertical: 'deltaY',\n    horizontal: 'deltaX'\n};\n\nconst SIZES = {\n    vertical: 'offsetHeight',\n    horizontal: 'offsetWidth'\n};\n\nexport default class ScrollView extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.thumbSize = {\n            vertical: 0,\n            horizontal: 0\n        };\n\n        this.timer = null;\n\n        this.onWheel = this.onWheel.bind(this);\n\n        this.state = {\n            position: {\n                vertical: 0,\n                horizontal: 0\n            }\n        };\n\n\n    }\n\n    componentDidMount() {\n        this.updateContentSize();\n        this.setState({\n            position: {\n                vertical: 0,\n                horizontal: 0\n            }\n        });\n    }\n\n    componentDidUpdate() {\n        this.updateContentSize();\n    }\n\n    updateContentSize() {\n\n        const {\n            main,\n            content\n        } = this.refs;\n\n        const {\n            position\n        } = this.state;\n\n        this.getDirections().forEach(key => {\n            let contentSize = content[SIZES[key]];\n            let mainSize = main[SIZES[key]];\n            this.thumbSize[key] = mainSize === contentSize\n                            ? 0\n                            : Math.round(mainSize * mainSize / contentSize);\n\n            let top = Math.round(position[key] * contentSize * (1 - mainSize / contentSize));\n            content.style[key === 'vertical' ? 'top' : 'left'] = (-top) + 'px';\n        });\n\n    }\n\n    onAction(direction, e) {\n        let {\n            action,\n            position\n        } = e;\n\n        switch (action) {\n            case 'change':\n                let pos = {};\n                pos[direction] = position;\n                this.setScrollPercent(pos);\n                break;\n        }\n    }\n\n    onWheel(e) {\n\n        let directions = this.getDirections();\n\n        let {\n            wheelSpeed\n        } = this.props;\n\n        let current = this.state.position;\n\n        directions.forEach(function (name) {\n\n            current[name] += e[DIRECTIONS[name]] * wheelSpeed;\n\n            const percent = current[name];\n\n            if (percent >= 0.005 && percent <= 0.995) {\n                e.preventDefault();\n            }\n\n        });\n\n        this.setScrollPercent(current);\n\n        if (directions.length === 2) {\n            e.preventDefault();\n        }\n\n    }\n\n    setScrollPercent(percent) {\n\n        let position = this.state.position;\n\n        Object.keys(percent).forEach(function (key) {\n\n            let pos = percent[key];\n\n            if (pos < 0.005) {\n                pos = 0;\n            }\n            else if (1 - pos < 0.005) {\n                pos = 1;\n            }\n\n            position[key] = pos;\n\n        });\n\n        this.setState({position}, function () {\n            let onScroll = this.props.onScroll;\n            onScroll && onScroll({\n                position: position,\n                target: this\n            });\n        });\n\n    }\n\n    getDirections() {\n        const {direction} = this.props;\n        const directions = direction === 'both' ? Object.keys(DIRECTIONS) : [direction];\n        return directions;\n    }\n\n    renderScrollBar() {\n\n        const directions = this.getDirections();\n\n        const {position} = this.state;\n\n        return directions.map((dir, index) => {\n\n            const size = this.thumbSize[dir];\n\n            if (!size) {\n                return;\n            }\n\n            return (\n                <Bar\n                    key={dir}\n                    thumbSize={size}\n                    onAction={this.onAction.bind(this, dir)}\n                    position={position[dir]}\n                    direction={dir} />\n            );\n\n        });\n    }\n\n    render() {\n\n        const {\n            children,\n            others,\n            height,\n            width\n        } = this.props;\n\n        return (\n            <div\n                {...others}\n                className={cx(this.props).addVariants(this.getDirections()).build()}\n                style={{height, width}}\n                onWheel={this.onWheel}\n                ref=\"main\">\n                {this.renderScrollBar()}\n                <div ref=\"content\" className={cx().part('main').build()}>\n                    {children}\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nScrollView.displayName = 'ScrollView';\n\nScrollView.propTypes = {\n    direction: PropTypes.oneOf(['vertical', 'horizontal', 'both']),\n    wheelSpeed: PropTypes.number,\n    onScroll: PropTypes.func\n};\n\nScrollView.defaultProps = {\n    direction: 'vertical',\n    wheelSpeed: 0.005\n};\n"]}