{"version":3,"sources":["/src/Navigation.js"],"names":["cx","Navigation","props","context","onToggle","bind","state","open","onClose","onOpen","openable","setState","handler","render","label","children","icon","level","toArray","filter","child","type","map","getPartClassName","transformOrigin","className","addVariants","build","propTypes","node","bool","func","string","active","number","defaultProps","NavigationItem","NavigationHeader","default"],"mappings":"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","file":"Navigation.js","sourcesContent":["/**\n * @file Navigation\n * @author leon <ludafa@outlook.com>\n */\n\nimport React, {Component, PropTypes, Children, cloneElement} from 'react';\nimport NavigationItem from './navigtaion/Item';\nimport NavigationHeader from './navigtaion/Header';\nimport Divider from './Divider';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from './Icon';\nimport Zippy from './Zippy';\nimport TouchRipple from './ripples/TouchRipple';\n\nconst cx = create('Navigation');\n\nclass Navigation extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n        this.onToggle = this.onToggle.bind(this);\n        this.state = {\n            open: props.open\n        };\n    }\n\n    onToggle() {\n\n        let {\n            onClose,\n            onOpen,\n            openable\n        } = this.props;\n\n        if (!openable) {\n            return;\n        }\n\n        this.setState({\n            open: !this.state.open\n        }, () => {\n            let handler = this.state.open ? onOpen : onClose;\n            handler && handler();\n        });\n\n    }\n\n    render() {\n\n        let {\n            label,\n            children,\n            icon,\n            level\n        } = this.props;\n\n        if (typeof icon === 'string') {\n            icon = <Icon name={icon} />;\n        }\n\n        if (children) {\n            children = Children\n                .toArray(children)\n                .filter(child => (\n                    child.type === NavigationItem\n                    || child.type === NavigationHeader\n                    || child.type === Divider\n                    || child.type === Navigation\n                ))\n                .map(child => (\n                    child.type === Navigation\n                        ? cloneElement(child, {level: level + 1})\n                        : (\n                            child.type === NavigationItem\n                                ? cloneElement(child, {level})\n                                : child\n                        )\n                ));\n        }\n\n        if (label && level > 0) {\n            label = (\n                <div\n                    onClick={this.onToggle}\n                    className={cx.getPartClassName('touchable')}>\n                    {icon}\n                    <span className={cx.getPartClassName('label')}>{label}</span>\n                    <TouchRipple />\n                </div>\n            );\n            children = (\n                <Zippy\n                    direction=\"vertical\"\n                    style={{transformOrigin: `${level}em top`}}\n                    expand={this.state.open}>\n                    {children}\n                </Zippy>\n            );\n        }\n\n        let className = cx(this.props).addVariants([`level-${level}`]).build();\n\n        return (\n            <div className={className}>\n                {label}\n                {children}\n            </div>\n        );\n\n    }\n\n}\n\nNavigation.propTypes = {\n    icon: PropTypes.node,\n    open: PropTypes.bool,\n    openable: PropTypes.bool,\n    onOpen: PropTypes.func,\n    onClose: PropTypes.func,\n    label: PropTypes.string,\n    active: PropTypes.bool,\n    level: PropTypes.number\n};\n\n/* eslint-disable fecs-valid-map-set */\nNavigation.defaultProps = {\n    openable: true,\n    open: true,\n    level: 0\n};\n/* eslint-enable fecs-valid-map-set */\n\nexport {\n    NavigationItem,\n    NavigationHeader,\n    Navigation as default\n};\n"]}