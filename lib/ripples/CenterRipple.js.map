{"version":3,"sources":["ripples/CenterRipple.js"],"names":["cx","CenterRipple","props","state","now","willLeave","bind","animate","setState","Date","componentWillReceiveProps","nextProps","flag","shouldCompoenntUpdate","nextState","opacity","scale","key","valOfKey","stiffness","damping","render","children","styles","style","className","build","circleClassName","part","interpolatedStyles","map","config","defaultProps","propTypes","number","isRequired","bool","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAWA,QAAMA,KAAK,uBAAO,cAAP,CAAX;;QAEqBC,Y;;;AAEjB,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA,qEAEf,sBAAMA,KAAN,CAFe;;AAIf,kBAAKC,KAAL,GAAa;AACTC,qBAAK,MAAM;AADF,aAAb;;AAIA,kBAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,OAAjB;AARe;AASlB;;+BAEDC,O,sBAAU;AACN,iBAAKC,QAAL,CAAc;AACVJ,qBAAK,MAAMK,KAAKL,GAAL;AADD,aAAd;AAGH,S;;+BAEDM,yB,sCAA0BC,S,EAAW;AACjC,gBAAIA,UAAUC,IAAV,KAAmB,CAAC,KAAKV,KAAL,CAAWU,IAAnC,EAAyC;AACrC,qBAAKL,OAAL;AACH;AACJ,S;;+BAEDM,qB,kCAAsBF,S,EAAWG,S,EAAW;AACxC,mBAAO,KAAKZ,KAAL,CAAWa,OAAX,KAAuBJ,UAAUI,OAAjC,IACA,KAAKb,KAAL,CAAWc,KAAX,KAAqBL,UAAUK,KAD/B,IAEA,KAAKd,KAAL,CAAWU,IAAX,KAAoBD,UAAUC,IAF9B,IAGA,KAAKT,KAAL,CAAWC,GAAX,KAAmBU,UAAUV,GAHpC;AAIH,S;;+BAEDC,S,sBAAUY,G,EAAKC,Q,EAAU;AACrB,+CACOA,QADP;AAEIH,yBAAS,yBAAO,CAAP,EAAU,EAACI,WAAW,EAAZ,EAAgBC,SAAS,EAAzB,EAAV,CAFb;AAGIJ,uBAAO,yBAAO,KAAKd,KAAL,CAAWc,KAAlB,EAAyB,EAACG,WAAW,EAAZ,EAAgBC,SAAS,EAAzB,EAAzB;AAHX;AAKH,S;;+BAEDC,M,qBAAS;AAAA,yBAEuB,KAAKnB,KAF5B;AAAA,gBAEEa,OAFF,UAEEA,OAFF;AAAA,gBAEWO,QAFX,UAEWA,QAFX;AAAA,gBAGElB,GAHF,GAGS,KAAKD,KAHd,CAGEC,GAHF;;;AAKL,gBAAMmB,SAAS,CAAC;AACZN,qBAAKb,GADO;AAEZoB,uBAAO;AACHT,6BAAS,yBAAOA,OAAP,CADN;AAEHC,2BAAO,yBAAO,CAAP;AAFJ;AAFK,aAAD,CAAf;;AAQA,gBAAMS,YAAYzB,GAAG,KAAKE,KAAR,EAAewB,KAAf,EAAlB;AACA,gBAAMC,kBAAkB3B,KAAK4B,IAAL,CAAU,QAAV,EAAoBF,KAApB,EAAxB;;AAEA,mBACI;AAAA;AAAA;AACI,+BAAW,KAAKrB,SADpB;AAEI,4BAAQkB,MAFZ;AAGK;AAAA,2BACG;AAAA;AAAA,0BAAK,WAAWE,SAAhB;AACKI,2CAAmBC,GAAnB,CAAuB,kBAAU;AAAA,gDACPC,OAAOP,KADA;AAAA,gCACzBT,OADyB,iBACzBA,OADyB;AAAA,gCAChBC,KADgB,iBAChBA,KADgB;;AAE9B,mCACI;AACI,qCAAKe,OAAOd,GADhB;AAEI,2CAAWU,eAFf;AAGI,yCAASZ,OAHb;AAII,uCAAOC,KAJX,GADJ;AAOH,yBATA,CADL;AAWKM;AAXL,qBADH;AAAA;AAHL,aADJ;AAsBH,S;;;;;yBA9EgBrB,Y;;;AAkFrBA,iBAAa+B,YAAb,GAA4B;AACxBjB,iBAAS,GADe;AAExBC,eAAO;AAFiB,KAA5B;;AAKAf,iBAAagC,SAAb,GAAyB;AACrBlB,iBAAS,iBAAUmB,MAAV,CAAiBC,UADL;AAErBnB,eAAO,iBAAUkB,MAAV,CAAiBC,UAFH;AAGrBvB,cAAM,iBAAUwB;AAHK,KAAzB;;AAMAnC,iBAAaoC,WAAb,GAA2B,cAA3B","file":"CenterRipple.js","sourcesContent":["/**\n * @file melon/CenterRipple\n * @author cxtom<cxtom2008@gmail.com>\n */\n\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport RippleCircle from './RippleCircle';\nimport {spring, TransitionMotion} from 'react-motion';\n\nconst cx = create('CenterRipple');\n\nexport default class CenterRipple extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.state = {\n            now: 't' + 0\n        };\n\n        this.willLeave = this.willLeave.bind(this);\n    }\n\n    animate() {\n        this.setState({\n            now: 't' + Date.now()\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.flag === !this.props.flag) {\n            this.animate();\n        }\n    }\n\n    shouldCompoenntUpdate(nextProps, nextState) {\n        return this.props.opacity !== nextProps.opacity\n            || this.props.scale !== nextProps.scale\n            || this.props.flag !== nextProps.flag\n            || this.state.now !== nextState.now;\n    }\n\n    willLeave(key, valOfKey) {\n        return {\n            ...valOfKey,\n            opacity: spring(0, {stiffness: 60, damping: 15}),\n            scale: spring(this.props.scale, {stiffness: 60, damping: 15})\n        };\n    }\n\n    render() {\n\n        const {opacity, children} = this.props;\n        const {now} = this.state;\n\n        const styles = [{\n            key: now,\n            style: {\n                opacity: spring(opacity),\n                scale: spring(0)\n            }\n        }];\n\n        const className = cx(this.props).build();\n        const circleClassName = cx().part('circle').build();\n\n        return (\n            <TransitionMotion\n                willLeave={this.willLeave}\n                styles={styles}>\n                {interpolatedStyles =>\n                    <div className={className}>\n                        {interpolatedStyles.map(config => {\n                            let {opacity, scale} = config.style;\n                            return (\n                                <RippleCircle\n                                    key={config.key}\n                                    className={circleClassName}\n                                    opacity={opacity}\n                                    scale={scale} />\n                            );\n                        })}\n                        {children}\n                    </div>\n                }\n            </TransitionMotion>\n        );\n\n    }\n\n}\n\nCenterRipple.defaultProps = {\n    opacity: 0.5,\n    scale: 2\n};\n\nCenterRipple.propTypes = {\n    opacity: PropTypes.number.isRequired,\n    scale: PropTypes.number.isRequired,\n    flag: PropTypes.bool\n};\n\nCenterRipple.displayName = 'CenterRipple';\n"]}