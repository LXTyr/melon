{"version":3,"sources":["table/Row.js"],"names":["cx","TableRow","shouldComponentUpdate","nextProps","nextState","props","tableWidth","rowHasChanged","data","renderCell","columnData","index","part","height","rowIndex","width","align","dataKey","cellRenderer","cellData","cellProps","key","columnIndex","rowData","cellKey","content","partSpecificRenderer","render","columns","build","map","column","displayName","propTypes","number","oneOf","isRequired","oneOfType","object","array","func"],"mappings":"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","file":"Row.js","sourcesContent":["/**\n * @file melon/TableRow\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport TableCell from './Cell';\n\nconst cx = create('TableRow');\n\n/**\n * 表格行\n *\n * @extends React.Component\n */\nexport default class TableRow extends Component {\n\n    /**\n     * 是否应该更新视图\n     *\n     * @public\n     * @param  {*} nextProps 下一个属性\n     * @param  {*} nextState 下一个状态\n     * @return {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n\n        const {\n            tableWidth,\n            rowHasChanged,\n            data\n        } = this.props;\n\n        if (tableWidth !== nextProps.tableWidth) {\n            return true;\n        }\n\n        if (rowHasChanged) {\n            return rowHasChanged(data, nextProps.data);\n        }\n\n        return true;\n\n    }\n\n    /**\n     * 渲染表格单元格\n     *\n     * @protected\n     * @param {*} props 属性\n     * @param {*} columnData 列配置\n     * @param {*} index 行号\n     * @return {React.Element}\n     */\n    renderCell(props, columnData, index) {\n\n        const {\n            part,\n            data,\n            height,\n            rowIndex\n        } = props;\n\n        const {\n            width,\n            align,\n            dataKey,\n            cellRenderer\n        } = columnData;\n\n        const cellData = part === 'header' || part === 'footer'\n            ? columnData[part]\n            : data[dataKey];\n\n        const cellProps = {\n            part,\n            height,\n            width,\n            align,\n            rowIndex,\n            columnData,\n            cellData,\n            key: dataKey || part,\n            columnIndex: index,\n            rowData: data,\n            cellKey: dataKey\n        };\n\n        // 内容默认是 cellData\n        let content = cellData;\n\n        // 如果有 cellRenderer\n        if (typeof cellRenderer === 'function') {\n            content = cellRenderer(cellProps);\n        }\n        // 或者是有局部的 renderer\n        else {\n\n            const partSpecificRenderer = columnData[`${part}Renderer`];\n\n            if (typeof partSpecificRenderer === 'function') {\n                content = partSpecificRenderer(cellProps);\n            }\n\n        }\n\n        return (\n            <TableCell {...cellProps} content={content} />\n        );\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {Element}\n     */\n    render() {\n\n        const props = this.props;\n        const {columns, tableWidth} = props;\n\n        return (\n            <div\n                className={cx(props).build()}\n                style={{width: tableWidth ? tableWidth - 2 : null}}>\n                {columns.map((column, index) => this.renderCell(props, column.props, index))}\n            </div>\n        );\n\n    }\n\n\n}\n\nTableRow.displayName = 'TableRow';\n\nTableRow.propTypes = {\n\n    index: PropTypes.number,\n\n    /**\n     * 行类型\n     *\n     * @type {string}\n     */\n    part: PropTypes.oneOf(['header', 'footer', 'body']).isRequired,\n\n    /**\n     * 行数据\n     *\n     * @type {(Object | array)}\n     */\n    data: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n    /**\n     * Height of the row.\n     * @type {number}\n     */\n    height: PropTypes.number.isRequired,\n\n    /**\n     * 行数据是否发生变化\n     *\n     * 此函数会被用于优化性能。如果返回值为 false，那么当前行不会被更新\n     *\n     * @type {Funciton}\n     */\n    rowHasChanged: PropTypes.func.isRequired\n};\n"]}