{"version":3,"sources":["table/Cell.js"],"names":["cx","TableCell","shouldComponentUpdate","nextProps","props","render","align","width","height","content","style","textAlign","build","getPartClassName","displayName","propTypes","part","oneOf","columnData","any","rowData","columnIndex","number","rowIndex","cellData","cellKey","oneOfType","string","isRequired","minWidth","maxWidth","cellRenderer","func","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;;AAQA,QAAMA,KAAK,uBAAO,WAAP,CAAX;;QAEqBC,S;;;;;;;;4BAEjBC,qB,kCAAsBC,S,EAAW;AAC7B,mBAAOA,cAAc,KAAKC,KAA1B;AACH,S;;4BAEDC,M,qBAAS;AAAA,yBAEmC,KAAKD,KAFxC;AAAA,gBAEEE,KAFF,UAEEA,KAFF;AAAA,gBAESC,KAFT,UAESA,KAFT;AAAA,gBAEgBC,MAFhB,UAEgBA,MAFhB;AAAA,gBAEwBC,OAFxB,UAEwBA,OAFxB;;;AAIL,gBAAMC,QAAQ;AACVC,2BAAWL,KADD;AAEVC,uBAAOA,KAFG;AAGVC,wBAAQA;AAHE,aAAd;;AAMA,mBACI;AAAA;AAAA,kBAAK,WAAWR,GAAG,KAAKI,KAAR,EAAeQ,KAAf,EAAhB;AACI;AAAA;AAAA,sBAAK,WAAWZ,GAAGa,gBAAH,CAAoB,OAApB,CAAhB,EAA8C,OAAOH,KAArD;AACI;AAAA;AAAA,0BAAK,WAAWV,GAAGa,gBAAH,CAAoB,OAApB,CAAhB;AACI;AAAA;AAAA,8BAAK,WAAWb,GAAGa,gBAAH,CAAoB,OAApB,CAAhB;AACKJ;AADL;AADJ;AADJ;AADJ,aADJ;AAYH,S;;;;;yBA5BgBR,S;;;AAgCrBA,cAAUa,WAAV,GAAwB,WAAxB;;AAEAb,cAAUc,SAAV,GAAsB;;AAElBC,cAAM,iBAAUC,KAAV,CAAgB,CAAC,QAAD,EAAW,MAAX,EAAmB,QAAnB,CAAhB,CAFY;;AAIlBC,oBAAY,iBAAUC,GAJJ;AAKlBC,iBAAS,iBAAUD,GALD;AAMlBE,qBAAa,iBAAUC,MANL;AAOlBC,kBAAU,iBAAUD,MAPF;AAQlBE,kBAAU,iBAAUL,GARF;AASlBM,iBAAS,iBAAUC,SAAV,CAAoB,CACzB,iBAAUC,MAAV,CAAiBC,UADQ,EAEzB,iBAAUN,MAAV,CAAiBM,UAFQ,CAApB,CATS;AAalBpB,gBAAQ,iBAAUc,MAAV,CAAiBM,UAbP;AAclBrB,eAAO,iBAAUe,MAAV,CAAiBM,UAdN;AAelBC,kBAAU,iBAAUP,MAfF;AAgBlBQ,kBAAU,iBAAUR,MAhBF;;AAkBlBS,sBAAc,iBAAUC;;AAlBN,KAAtB;;AAsBA/B,cAAUgC,YAAV,GAAyB;AACrB3B,eAAO;AADc,KAAzB","file":"Cell.js","sourcesContent":["/**\n * @file melon/TableCell\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\n\nconst cx = create('TableCell');\n\nexport default class TableCell extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        return nextProps !== this.props;\n    }\n\n    render() {\n\n        const {align, width, height, content} = this.props;\n\n        const style = {\n            textAlign: align,\n            width: width,\n            height: height\n        };\n\n        return (\n            <div className={cx(this.props).build()}>\n                <div className={cx.getPartClassName('wrap1')} style={style}>\n                    <div className={cx.getPartClassName('wrap2')}>\n                        <div className={cx.getPartClassName('wrap3')}>\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    }\n\n}\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n\n    part: PropTypes.oneOf(['header', 'body', 'footer']),\n\n    columnData: PropTypes.any,\n    rowData: PropTypes.any,\n    columnIndex: PropTypes.number,\n    rowIndex: PropTypes.number,\n    cellData: PropTypes.any,\n    cellKey: PropTypes.oneOfType([\n        PropTypes.string.isRequired,\n        PropTypes.number.isRequired\n    ]),\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired,\n    minWidth: PropTypes.number,\n    maxWidth: PropTypes.number,\n\n    cellRenderer: PropTypes.func\n\n};\n\nTableCell.defaultProps = {\n    align: 'left'\n};\n"]}