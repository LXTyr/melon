{"version":3,"sources":["table/Column.js"],"names":["cx","TableColumn","render","displayName","propTypes","align","oneOf","cellRenderer","func","headerRenderer","bodyRenderer","dataKey","oneOfType","string","number","title","width","isRequired","grow","shrink","maxWidth","minWidth","sortable","bool","sortBy","editable","editorMode","editorTitle","placeholder","onChange","propName","props","Error","SORT_ICONS","asc","none","desc","columnData","cellData","onSort","className","addVariants","addStates","build","getPartClassName","rowData","columnIndex","rowIndex","content","defaultProps","_TABLE_COMPONENT_"],"mappings":"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","file":"Column.js","sourcesContent":["/**\n * @file TableColumn\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport Tooltip from '../Tooltip';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from '../Icon';\nimport TableCellTextEditor from './TextEditor';\n\nconst cx = create('TableColumnHeader');\n\n/**\n * 表格列\n *\n * @extends React.Component\n */\nexport default class TableColumn extends Component {\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n        return null;\n    }\n\n}\n\nTableColumn.displayName = 'TableColumn';\n\nTableColumn.propTypes = {\n\n    /**\n     * 单元格式对齐方式\n     *\n     * @type {string}\n     */\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n\n    /**\n     * 单元格渲染函数\n     *\n     * @type {function}\n     */\n    cellRenderer: PropTypes.func,\n\n    headerRenderer: PropTypes.func,\n\n    bodyRenderer: PropTypes.func,\n\n    /**\n     * 单元格从行数据中取数据的键值\n     *\n     * 必须是string/number\n     *\n     * @type {(string|number)}\n     */\n    dataKey: PropTypes.oneOfType([\n        PropTypes.string, PropTypes.number\n    ]),\n\n    /**\n     * 列的头部文本\n     *\n     * @type {string}\n     */\n    title: PropTypes.string,\n\n    /**\n     * 单元格式宽度\n     *\n     * @type {number}\n     */\n    width: PropTypes.number.isRequired,\n\n    /**\n     * 列宽度增长度\n     * @type {number}\n     */\n    grow: PropTypes.number.isRequired,\n\n    /**\n     * 列宽度收缩度\n     * @type {number}\n     */\n    shrink: PropTypes.number.isRequired,\n\n    /**\n     * 最大宽度\n     *\n     * @type {number}\n     */\n    maxWidth: PropTypes.number,\n\n    /**\n     * 最小宽度\n     *\n     * @type {number}\n     */\n    minWidth: PropTypes.number,\n\n    /**\n     * 是否可排序\n     *\n     * @type {boolean}\n     */\n    sortable: PropTypes.bool,\n\n    /**\n     * 排序顺序\n     *\n     * @type {string}\n     */\n    sortBy: PropTypes.oneOf(['asc', 'desc', 'none']),\n\n    /**\n     * 是否可编辑\n     *\n     * @type {boolean}\n     */\n    editable: PropTypes.bool,\n\n    /**\n    * 编辑器选项\n    *\n    * @type {Object}\n    */\n    editorMode: PropTypes.oneOf(['inline', 'confirm']),\n\n    /**\n     * 编辑器标题\n     *\n     * @type {string}\n     */\n    editorTitle: PropTypes.string,\n\n    /**\n     * placeholder\n     *\n     * @type {string}\n     */\n    placeholder: PropTypes.string,\n\n    /**\n     * 文本编辑回调\n     *\n     * @type {Function}\n     * @param {string} propName 属性名\n     * @param {Object} props    属性\n     * @return {Error?}\n     */\n    onChange(propName, props) {\n        if (props.editable && props.onChange == null) {\n            return new Error('You muse set `onChange` handler while column is `editable`');\n        }\n    }\n\n};\n\nconst SORT_ICONS = {\n    asc: 'arrow-upward',\n    none: 'arrow-upward',\n    desc: 'arrow-downward'\n};\n\nTableColumn.headerRenderer = function (props) {\n\n    let {columnData, cellData} = props;\n    let {\n        sortable,\n        sortBy = 'none',\n        title,\n        align,\n        onSort\n    } = columnData;\n\n    let className = cx()\n        .addVariants([`align-${align}`])\n        .addStates({[`sort-by-${sortBy}`]: true})\n        .build();\n\n    if (sortable) {\n\n        cellData = align === 'right'\n            ? (\n                <div\n                    className={cx.getPartClassName('sorter')}\n                    onClick={onSort}>\n                    <Icon icon={SORT_ICONS[sortBy]} size=\"s\" />\n                    {cellData}\n                </div>\n            )\n            : (\n                <div\n                    className={cx.getPartClassName('sorter')}\n                    onClick={onSort}>\n                    {cellData}\n                    <Icon icon={SORT_ICONS[sortBy]} size=\"s\" />\n                </div>\n            );\n\n    }\n\n    if (title) {\n        cellData = (\n            <Tooltip content={title}>\n                {cellData}\n            </Tooltip>\n        );\n    }\n\n    return (\n        <div className={className}>\n            {cellData}\n        </div>\n    );\n\n};\n\nTableColumn.bodyRenderer = function (props) {\n\n    let {columnData, rowData, cellData, columnIndex, rowIndex} = props;\n\n    let {\n        editable,\n        editorMode,\n        onChange,\n        placeholder = '',\n        dataKey,\n        editorTitle\n    } = columnData;\n\n    let content = cellData == null ? placeholder : (cellData + '');\n\n    return editable\n        ? (\n            <TableCellTextEditor\n                mode={editorMode}\n                title={editorTitle}\n                onChange={onChange}\n                dataKey={dataKey}\n                columnData={columnData}\n                rowData={rowData}\n                rowIndex={rowIndex}\n                columnIndex={columnIndex}>\n                {content}\n            </TableCellTextEditor>\n        )\n        : cellData;\n};\n\nTableColumn.defaultProps = {\n    align: 'left',\n    headerRenderer: TableColumn.headerRenderer,\n    bodyRenderer: TableColumn.bodyRenderer,\n    grow: 1,\n    shrink: 1\n};\n\nTableColumn._TABLE_COMPONENT_ = 'COLUMN';\n"]}