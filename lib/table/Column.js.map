{"version":3,"sources":["/src/table/Column.js"],"names":["cx","TableColumn","render","displayName","propTypes","align","oneOf","cellRenderer","func","headerRenderer","bodyRenderer","dataKey","oneOfType","string","number","title","width","isRequired","sortable","bool","sortBy","SORT_ICONS","asc","none","desc","props","columnData","cellData","onSort","className","addVariants","addStates","build","getPartClassName","defaultProps","_TABLE_COMPONENT_"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;AAUA,QAAMA,KAAK,uBAAO,mBAAP,CAAX;;AAEA;;;;;;QAKqBC,W;;;;;;;;8BAQjBC,M,qBAAS;AACL,mBAAO,IAAP;AACH,S;;;;;yBAVgBD,W;;;AAcrBA,gBAAYE,WAAZ,GAA0B,aAA1B;;AAEAF,gBAAYG,SAAZ,GAAwB;;AAEpB;;;;;AAKAC,eAAO,iBAAUC,KAAV,CAAgB,CAAC,MAAD,EAAS,QAAT,EAAmB,OAAnB,CAAhB,CAPa;;AASpB;;;;;AAKAC,sBAAc,iBAAUC,IAdJ;;AAgBpBC,wBAAgB,iBAAUD,IAhBN;;AAkBpBE,sBAAc,iBAAUF,IAlBJ;;AAoBpB;;;;;;;AAOAG,iBAAS,iBAAUC,SAAV,CAAoB,CACzB,iBAAUC,MADe,EACP,iBAAUC,MADH,CAApB,CA3BW;;AA+BpB;;;;;AAKAC,eAAO,iBAAUF,MApCG;;AAsCpB;;;;;AAKAG,eAAO,iBAAUF,MAAV,CAAiBG,UA3CJ;;AA6CpB;;;;;AAKAC,kBAAU,iBAAUC,IAlDA;;AAoDpB;;;;;AAKAC,gBAAQ,iBAAUd,KAAV,CAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,MAAhB,CAAhB;;AAzDY,KAAxB;;AA6DA,QAAMe,aAAa;AACfC,aAAK,cADU;AAEfC,cAAM,cAFS;AAGfC,cAAM;AAHS,KAAnB;;AAMAvB,gBAAYQ,cAAZ,GAA6B,UAAUgB,KAAV,EAAiB;AAAA;;AAAA,YAErCC,UAFqC,GAEbD,KAFa,CAErCC,UAFqC;AAAA,YAEzBC,QAFyB,GAEbF,KAFa,CAEzBE,QAFyB;AAAA,YAItCT,QAJsC,GAStCQ,UATsC,CAItCR,QAJsC;AAAA,iCAStCQ,UATsC,CAKtCN,MALsC;AAAA,YAKtCA,MALsC,sCAK7B,MAL6B;AAAA,YAMtCL,KANsC,GAStCW,UATsC,CAMtCX,KANsC;AAAA,YAOtCV,KAPsC,GAStCqB,UATsC,CAOtCrB,KAPsC;AAAA,YAQtCuB,MARsC,GAStCF,UATsC,CAQtCE,MARsC;;;AAW1C,YAAIC,YAAY7B,KACX8B,WADW,CACC,YAAUzB,KAAV,CADD,EAEX0B,SAFW,iEAEYX,MAFZ,IAEuB,IAFvB,0BAGXY,KAHW,EAAhB;;AAKA,YAAId,QAAJ,EAAc;;AAEVS,uBAAWtB,UAAU,OAAV,GAEH;AAAA;AAAA;AACI,+BAAWL,GAAGiC,gBAAH,CAAoB,QAApB,CADf;AAEI,6BAASL,MAFb;AAGI,sEAAM,MAAMP,WAAWD,MAAX,CAAZ,EAAgC,MAAK,GAArC,GAHJ;AAIKO;AAJL,aAFG,GAUH;AAAA;AAAA;AACI,+BAAW3B,GAAGiC,gBAAH,CAAoB,QAApB,CADf;AAEI,6BAASL,MAFb;AAGKD,wBAHL;AAII,sEAAM,MAAMN,WAAWD,MAAX,CAAZ,EAAgC,MAAK,GAArC;AAJJ,aAVR;AAkBH;;AAED,YAAIL,KAAJ,EAAW;AACPY,uBACI;AAAA;AAAA,kBAAS,SAASZ,KAAlB;AACKY;AADL,aADJ;AAKH;;AAED,eACI;AAAA;AAAA,cAAK,WAAWE,SAAhB;AACKF;AADL,SADJ;AAMH,KApDD;;AAsDA1B,gBAAYiC,YAAZ,GAA2B;AACvB7B,eAAO,MADgB;AAEvBI,wBAAgBR,YAAYQ;AAFL,KAA3B;;AAKAR,gBAAYkC,iBAAZ,GAAgC,QAAhC","file":"Column.js","sourcesContent":["/**\n * @file TableColumn\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport Tooltip from '../Tooltip';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Icon from '../Icon';\n\nconst cx = create('TableColumnHeader');\n\n/**\n * 表格列\n *\n * @extends React.Component\n */\nexport default class TableColumn extends Component {\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n        return null;\n    }\n\n}\n\nTableColumn.displayName = 'TableColumn';\n\nTableColumn.propTypes = {\n\n    /**\n     * 单元格式对齐方式\n     *\n     * @type {string}\n     */\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n\n    /**\n     * 单元格渲染函数\n     *\n     * @type {function}\n     */\n    cellRenderer: PropTypes.func,\n\n    headerRenderer: PropTypes.func,\n\n    bodyRenderer: PropTypes.func,\n\n    /**\n     * 单元格从行数据中取数据的键值\n     *\n     * 必须是string/number\n     *\n     * @type {(string|number)}\n     */\n    dataKey: PropTypes.oneOfType([\n        PropTypes.string, PropTypes.number\n    ]),\n\n    /**\n     * 列的头部文本\n     *\n     * @type {string}\n     */\n    title: PropTypes.string,\n\n    /**\n     * 单元格式宽度\n     *\n     * @type {number}\n     */\n    width: PropTypes.number.isRequired,\n\n    /**\n     * 是否可排序\n     *\n     * @type {boolean}\n     */\n    sortable: PropTypes.bool,\n\n    /**\n     * 排序顺序\n     *\n     * @type {string}\n     */\n    sortBy: PropTypes.oneOf(['asc', 'desc', 'none'])\n\n};\n\nconst SORT_ICONS = {\n    asc: 'arrow-upward',\n    none: 'arrow-upward',\n    desc: 'arrow-downward'\n};\n\nTableColumn.headerRenderer = function (props) {\n\n    let {columnData, cellData} = props;\n    let {\n        sortable,\n        sortBy = 'none',\n        title,\n        align,\n        onSort\n    } = columnData;\n\n    let className = cx()\n        .addVariants([`align-${align}`])\n        .addStates({[`sort-by-${sortBy}`]: true})\n        .build();\n\n    if (sortable) {\n\n        cellData = align === 'right'\n            ? (\n                <div\n                    className={cx.getPartClassName('sorter')}\n                    onClick={onSort}>\n                    <Icon icon={SORT_ICONS[sortBy]} size=\"s\" />\n                    {cellData}\n                </div>\n            )\n            : (\n                <div\n                    className={cx.getPartClassName('sorter')}\n                    onClick={onSort}>\n                    {cellData}\n                    <Icon icon={SORT_ICONS[sortBy]} size=\"s\" />\n                </div>\n            );\n\n    }\n\n    if (title) {\n        cellData = (\n            <Tooltip content={title}>\n                {cellData}\n            </Tooltip>\n        );\n    }\n\n    return (\n        <div className={className}>\n            {cellData}\n        </div>\n    );\n\n};\n\nTableColumn.defaultProps = {\n    align: 'left',\n    headerRenderer: TableColumn.headerRenderer\n};\n\nTableColumn._TABLE_COMPONENT_ = 'COLUMN';\n"]}