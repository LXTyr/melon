{"version":3,"sources":["Mask.js"],"names":["windowScrollHelper","cx","Mask","componentDidMount","props","show","lockScrollingOnShow","lockScroll","shouldComponentUpdate","componentDidUpdate","unlockScroll","componentWillUnmount","stop","restore","render","addStates","build","defaultProps","propTypes","bool"],"mappings":";;;;;;;;;;;;;;;;;;;QAOYA,kB;AAPZ;;;;;AASA,QAAMC,KAAK,uBAAO,MAAP,CAAX;;AAEA;;;;;;;QAMqBC,I;;;;;;;;uBAQjBC,iB,gCAAoB;AAAA,yBAEoB,KAAKC,KAFzB;AAAA,gBAETC,IAFS,UAETA,IAFS;AAAA,gBAEHC,mBAFG,UAEHA,mBAFG;;;AAIhB,gBAAID,QAAQC,mBAAZ,EAAiC;AAC7B,qBAAKC,UAAL;AACH;AACJ,S;;uBASDC,qB,wCAA8B;AAAA,gBAAPH,IAAO,QAAPA,IAAO;;AAC1B,mBAAO,KAAKD,KAAL,CAAWC,IAAX,KAAoBA,IAA3B;AACH,S;;uBAQDI,kB,iCAAqB;AAAA,0BACmB,KAAKL,KADxB;AAAA,gBACVC,IADU,WACVA,IADU;AAAA,gBACJC,mBADI,WACJA,mBADI;;AAEjBD,oBAAQC,mBAAR,GAA8B,KAAKC,UAAL,EAA9B,GAAkD,KAAKG,YAAL,EAAlD;AACH,S;;uBAQDC,oB,mCAAuB;AACnB,iBAAKD,YAAL;AACH,S;;uBAODH,U,yBAAa;AACTP,+BAAmBY,IAAnB;AACH,S;;uBAODF,Y,2BAAe;AACXV,+BAAmBa,OAAnB;AACH,S;;uBAQDC,M,qBAAS;;AAEL,gBAAMV,QAAQ,KAAKA,KAAnB;AACA,gBAAMC,OAAOD,MAAMC,IAAnB;;AAEA,mBACI,oEAASD,KAAT,IAAgB,WAAWH,GAAGG,KAAH,EAAUW,SAAV,CAAoB,EAACV,UAAD,EAApB,EAA4BW,KAA5B,EAA3B,IADJ;AAIH,S;;;;;yBAlFgBd,I;;;AAsFrBA,SAAKe,YAAL,GAAoB;AAChBX,6BAAqB,IADL;AAEhBD,cAAM;AAFU,KAApB;;AAMAH,SAAKgB,SAAL,GAAiB;AACbZ,6BAAqB,iBAAUa,IADlB;AAEbd,cAAM,iBAAUc;AAFH,KAAjB","file":"Mask.js","sourcesContent":["/**\n * @file melon/Mask\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport * as windowScrollHelper from './dialog/windowScrollHelper';\n\nconst cx = create('Mask');\n\n/**\n * melon/Pager\n *\n * @extends {React.Component}\n * @class\n */\nexport default class Mask extends Component {\n\n    /**\n     * Mount时的处理\n     *\n     * @public\n     * @override\n     */\n    componentDidMount() {\n\n        const {show, lockScrollingOnShow} = this.props;\n\n        if (show && lockScrollingOnShow) {\n            this.lockScroll();\n        }\n    }\n\n    /**\n     * 是否更新组件\n     *\n     * @public\n     * @override\n     * @return {boolean}\n     */\n    shouldComponentUpdate({show}) {\n        return this.props.show !== show;\n    }\n\n    /**\n     * 更新时处理\n     *\n     * @public\n     * @override\n     */\n    componentDidUpdate() {\n        const {show, lockScrollingOnShow} = this.props;\n        show && lockScrollingOnShow ? this.lockScroll() : this.unlockScroll();\n    }\n\n    /**\n     * unmount时处理\n     *\n     * @public\n     * @override\n     */\n    componentWillUnmount() {\n        this.unlockScroll();\n    }\n\n    /**\n     * lock scrolling\n     *\n     * @public\n     */\n    lockScroll() {\n        windowScrollHelper.stop();\n    }\n\n    /**\n     * unlock scrolling\n     *\n     * @public\n     */\n    unlockScroll() {\n        windowScrollHelper.restore();\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        const props = this.props;\n        const show = props.show;\n\n        return (\n            <div {...props} className={cx(props).addStates({show}).build()} />\n        );\n\n    }\n\n}\n\nMask.defaultProps = {\n    lockScrollingOnShow: true,\n    show: false\n};\n\n\nMask.propTypes = {\n    lockScrollingOnShow: PropTypes.bool,\n    show: PropTypes.bool\n};\n"]}