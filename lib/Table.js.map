{"version":3,"sources":["Table.js"],"names":["dom","cx","Table","props","state","onWindowResize","bind","componentWillMount","setState","columns","getColumns","componentDidMount","window","addEventListener","componentWillReceiveProps","nextProps","componentWillUnmount","toArray","children","reduce","child","type","_TABLE_COMPONENT_","Error","push","rowHasChanged","renderHeader","width","getPartClassName","renderRow","renderBody","dataSource","noDataContent","body","length","map","rowData","index","part","tableWidth","rowHeight","headerRowHeight","highlight","height","renderFooter","main","offsetWidth","render","Math","max","build","displayName","propTypes","number","isRequired","bool","array","node","func","defaultProps","r1","r2","Column","default"],"mappings":"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","file":"Table.js","sourcesContent":["/**\n * @file melon/Table\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes, Children, cloneElement} from 'react';\nimport Row from './table/Row';\nimport * as dom from './common/util/dom';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Column from './table/Column';\n\nconst cx = create('Table');\n\n/**\n * 表格\n *\n * @extends React.Component\n */\nclass Table extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @param {*} props 属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.state = {};\n\n        this.onWindowResize = this.onWindowResize.bind(this);\n    }\n\n    /**\n     * 即将挂载到 DOM 时处理函数\n     *\n     * @public\n     */\n    componentWillMount() {\n        this.setState({\n            columns: this.getColumns(this.props)\n        });\n    }\n\n    /**\n     * 已完成首次渲染时的处理函数\n     *\n     * @public\n     */\n    componentDidMount() {\n        this.onWindowResize();\n        window.addEventListener('resize', this.onWindowResize);\n    }\n\n    /**\n     * 接受新属性时的处理函数\n     *\n     * @public\n     * @param  {*} nextProps 下一个属性\n     */\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            columns: this.getColumns(nextProps)\n        });\n    }\n\n    /**\n     * 即将被销毁时的处理函数\n     *\n     * @public\n     */\n    componentWillUnmount() {\n        window.addEventListener('resize', this.onWindowResize);\n    }\n\n    /**\n     * 从属性中解析出列配置\n     *\n     * @protected\n     * @param  {*} props 属性\n     * @return {Array.Element}\n     */\n    getColumns(props) {\n\n        return Children\n            .toArray(props.children)\n            .reduce(\n                (children, child) => {\n\n                    if (child != null) {\n\n                        if (child.type._TABLE_COMPONENT_ !== 'COLUMN') {\n                            throw new Error('Table child must be a TableColumn');\n                        }\n\n                        children.push(\n                            cloneElement(\n                                child,\n                                {\n                                    rowHasChanged: props.rowHasChanged\n                                }\n                            )\n                        );\n\n                    }\n\n                    return children;\n                },\n                []\n            );\n\n    }\n\n    /**\n     * 渲染表格头部\n     *\n     * @protected\n     * @param  {Array.Element} columns 表格列\n     * @param  {number} width   表格宽度\n     * @return {Element}\n     */\n    renderHeader(columns, width) {\n        return (\n            <div className={cx.getPartClassName('header')}>\n                {this.renderRow('header', columns, null, -1, width)}\n            </div>\n        );\n    }\n\n    /**\n     * 渲染表格 body\n     *\n     * @protected\n     * @param  {Arra.Element} columns 表格列配置\n     * @param  {number} width   表格宽度\n     * @return {Element}\n     */\n    renderBody(columns, width) {\n\n        const {dataSource, noDataContent} = this.props;\n\n        const body = dataSource && dataSource.length\n            ? dataSource.map(\n                (rowData, index) => this.renderRow('body', columns, rowData, index, width)\n            )\n            : (\n                <div\n                    className={cx.getPartClassName('body-empty')}\n                    style={{width: width - 2}}>\n                    {noDataContent}\n                </div>\n            );\n\n        return (\n            <div className={cx.getPartClassName('body')}>\n                {body}\n            </div>\n        );\n\n    }\n\n    /**\n     * 渲染一行\n     *\n     * @protected\n     * @param  {string}        part       位置\n     * @param  {Array.Element} columns    列配置\n     * @param  {*}             rowData    行数据\n     * @param  {number}        index      行号\n     * @param  {number}        tableWidth 表格宽度\n     * @return {Element}\n     */\n    renderRow(part, columns, rowData, index, tableWidth) {\n\n        const {\n            rowHeight,\n            headerRowHeight,\n            highlight,\n            rowHasChanged\n        } = this.props;\n\n        const height = part === 'body' ? rowHeight : headerRowHeight;\n\n        return (\n            <Row\n                height={height}\n                highlight={highlight}\n                key={index}\n                rowIndex={index}\n                part={part}\n                columns={columns}\n                data={rowData}\n                tableWidth={tableWidth}\n                rowHasChanged={rowHasChanged} />\n        );\n    }\n\n    /**\n     * 渲染 footer\n     *\n     * @public\n     * @param  {Array.Element} columns 列\n     * @return {Element}\n     */\n    renderFooter(columns) {\n        return null;\n    }\n\n    /**\n     * 浏览器窗口大小变化处理函数\n     *\n     * @private\n     */\n    onWindowResize() {\n\n        const main = this.main;\n\n        if (this.main) {\n            this.setState({\n                width: main.offsetWidth\n            });\n        }\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {Element}\n     */\n    render() {\n\n        let {width, columns} = this.state;\n\n        if (width) {\n            // 计算出tableWidth和所有的columnWidth，将更大的一个传递给row使用\n            width = Math.max(\n                width,\n                columns.reduce(\n                    (width, columns) => width + columns.props.width,\n                    0\n                )\n            );\n        }\n        else {\n            width = '';\n        }\n\n        return (\n            <div\n                className={cx(this.props).build()}\n                ref={main => {\n                    this.main = main;\n                }}>\n                {this.renderHeader(columns, width)}\n                {this.renderBody(columns, width)}\n                {this.renderFooter(columns, width)}\n            </div>\n        );\n\n    }\n\n\n\n}\n\nTable.displayName = 'Table';\n\nTable.propTypes = {\n    rowHeight: PropTypes.number.isRequired,\n    highlight: PropTypes.bool,\n    headerRowHeight: PropTypes.number,\n    dataSource: PropTypes.array.isRequired,\n    noDataContent: PropTypes.node,\n    rowHasChanged: PropTypes.func.isRequired\n},\n\nTable.defaultProps = {\n    highlight: true,\n    rowHeight: 48,\n    headerRowHeight: 56,\n    noDataContent: '没有数据',\n    rowHasChanged(r1, r2) {\n        return r1 !== r2;\n    }\n};\n\nTable.Column = Column;\n\nexport {\n    Table as default,\n    Column\n};\n"]}