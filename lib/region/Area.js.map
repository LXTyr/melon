{"version":3,"sources":["region/Area.js"],"names":["helper","cx","RegionArea","props","onSelectorChange","bind","onProvinceChange","e","value","datasource","onChange","data","index","children","isAllSelected","onCityChange","pIndex","cIndex","p","renderProvince","child","Array","isArray","length","map","i","renderCity","render","build","part","text","id","selected","displayName","propTypes","func","disabled","bool","object"],"mappings":"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","file":"Area.js","sourcesContent":["/**\n * @file Region/RegionArea\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Selector from './Selector';\nimport Province from './Province';\nimport City from './City';\nimport * as helper from './helper';\n\nconst cx = create('RegionArea');\n\nexport default class RegionArea extends Component {\n\n    constructor(props) {\n\n        super(props);\n\n        this.onSelectorChange = this.onSelectorChange.bind(this);\n        this.onProvinceChange = this.onProvinceChange.bind(this);\n\n    }\n\n    onSelectorChange(e) {\n\n        const value = e.value;\n        const {datasource, onChange} = this.props;\n\n        helper[value ? 'selectAll' : 'cancelAll'](datasource);\n\n        onChange && onChange({\n            data: datasource\n        });\n\n    }\n\n    onProvinceChange(index, e) {\n\n        const data = e.data;\n        const {datasource, onChange} = this.props;\n\n        datasource.children[index] = data;\n\n        helper.isAllSelected(datasource);\n\n        onChange && onChange({\n            data: datasource\n        });\n\n    }\n\n    onCityChange(pIndex, cIndex, e) {\n\n        const data = e.data;\n\n        const {datasource, onChange} = this.props;\n\n        const p = datasource.children[pIndex];\n\n        p.children[cIndex] = data;\n\n        helper.isAllSelected(p);\n\n        onChange && onChange({\n            data: datasource\n        });\n\n    }\n\n    renderProvince(child, index) {\n        return (\n            <Province\n                key={index}\n                datasource={child}\n                onChange={this.onProvinceChange.bind(this, index)}>\n                {\n                    Array.isArray(child.children) && child.children.length > 0\n                    ? child.children.map((child, i) => (\n                        this.renderCity(index, child, i)\n                    ))\n                    : null\n                }\n            </Province>\n        );\n    }\n\n    renderCity(pIndex, child, index) {\n        return (\n            <City\n                key={index}\n                datasource={child}\n                onChange={e => this.onCityChange(pIndex, index, e)} />\n        );\n    }\n\n    render() {\n\n        const datasource = this.props.datasource;\n\n        return (\n            <li className={cx(this.props).build()}>\n                <div className={cx().part('selector').build()}>\n                    <Selector\n                        label={datasource.text}\n                        id={datasource.id}\n                        checked={datasource.selected}\n                        onChange={this.onSelectorChange} />\n                </div>\n                <div className={cx().part('content').build()}>\n                    {datasource\n                        .children\n                        .map((...args) => this.renderProvince(...args))\n                    }\n                </div>\n            </li>\n        );\n    }\n\n}\n\nRegionArea.displayName = 'RegionArea';\n\n\nRegionArea.propTypes = {\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n    datasource: PropTypes.object\n};\n"]}