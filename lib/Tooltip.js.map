{"version":3,"sources":["Tooltip.js"],"names":["cx","DIRECTION_ALIGNMENT_MAP","top","bottom","left","right","DIRECTION_OFFSET_MAP","MODES","over","click","Tooltip","props","onClick","bind","onMouseEnter","onMouseLeave","onRequestClose","hide","state","open","e","toggle","show","mode","setState","getPopoverAlignment","offset","direction","layerAlignment","anchorAlignment","layerOffset","map","i","render","children","style","content","maxHeight","closeDelay","eventHanlders","innerEventHandlers","className","addVariants","build","alignment","refs","main","getPartClassName","displayName","propTypes","oneOf","isRequired","node","number","defaultProps"],"mappings":"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","file":"Tooltip.js","sourcesContent":["/**\n * @file melon/Tooltip\n * @author leon(ludafa@outlook.com)\n */\n\nimport React, {Component, PropTypes} from 'react';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Popover from './Popover';\n\nconst cx = create('Tooltip');\n\nconst DIRECTION_ALIGNMENT_MAP = {\n    top: ['tc', 'bc'],\n    bottom: ['bc', 'tc'],\n    left: ['cl', 'cr'],\n    right: ['cr', 'cl']\n};\n\nconst DIRECTION_OFFSET_MAP = {\n    top: [0, -1],\n    bottom: [0, 1],\n    left: [-1, 0],\n    right: [1, 0]\n};\n\nconst MODES = {\n    over: 'over',\n    click: 'click'\n};\n\n/**\n * melon/Tooltip\n *\n * @extends {React.Component}\n * @class\n */\nexport default class Tooltip extends Component {\n\n    /**\n     * 构造函数\n     *\n     * @public\n     * @constructor\n     * @param  {*} props   属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.onClick = this.onClick.bind(this);\n        this.onMouseEnter = this.onMouseEnter.bind(this);\n        this.onMouseLeave = this.onMouseLeave.bind(this);\n        this.onRequestClose = this.onRequestClose.bind(this);\n        this.hide = this.hide.bind(this);\n\n        /**\n         * 状态\n         *\n         * @protected\n         * @type {Object}\n         */\n        this.state = {\n            open: false\n        };\n\n    }\n\n    /**\n     * 点击时的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onClick(e) {\n        this.toggle();\n    }\n\n    /**\n     * 鼠标进入时的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onMouseEnter(e) {\n        this.show();\n    }\n\n    /**\n     * 点击离开的处理\n     *\n     * @protected\n     * @param  {Object} e 事件对象\n     */\n    onMouseLeave(e) {\n        this.hide();\n    }\n\n    onRequestClose() {\n        if (this.props.mode === 'click') {\n            this.hide();\n        }\n    }\n\n    /**\n     * 改变当前显示状态\n     *\n     * @public\n     */\n    toggle() {\n        this.state.open ? this.hide() : this.show();\n    }\n\n    /**\n     * 显示tip\n     *\n     * @public\n     */\n    show() {\n        this.setState({open: true});\n    }\n\n    /**\n     * 隐藏tip\n     *\n     * @public\n     */\n    hide() {\n        this.setState({open: false});\n    }\n\n    getPopoverAlignment() {\n\n        let {\n            offset,\n            direction\n        } = this.props;\n\n        let [layerAlignment, anchorAlignment] = DIRECTION_ALIGNMENT_MAP[direction];\n        let layerOffset = DIRECTION_OFFSET_MAP[direction].map(i => i * offset);\n\n        return {\n            layerAlignment,\n            anchorAlignment,\n            layerOffset\n        };\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {ReactElement}\n     */\n    render() {\n\n        let {\n            mode,\n            direction,\n            children,\n            style,\n            content,\n            maxHeight,\n            closeDelay\n        } = this.props;\n\n        let eventHanlders = mode === MODES.click\n            ? {\n                onClick: this.onClick\n            }\n            : {\n                onMouseEnter: this.onMouseEnter,\n                onMouseLeave: this.onMouseLeave\n            };\n\n        let innerEventHandlers = mode === MODES.over ? eventHanlders : null;\n\n        let className = cx(this.props).addVariants(direction).build();\n        let alignment = this.getPopoverAlignment();\n\n        return (\n            <div\n                {...eventHanlders}\n                ref=\"main\"\n                style={style}\n                className={className}>\n                {children}\n                <Popover\n                    {...alignment}\n                    closeDelay={closeDelay}\n                    open={this.state.open}\n                    variants={['tooltip']}\n                    maxHeight={maxHeight}\n                    autoWidth={true}\n                    useLayerMask={false}\n                    anchor={this.refs.main}\n                    onRequestClose={this.onRequestClose}>\n                    <div\n                        {...innerEventHandlers}\n                        className={cx.getPartClassName('popover')}>\n                        {content}\n                    </div>\n                </Popover>\n            </div>\n        );\n    }\n\n}\n\nTooltip.displayName = 'Tooltip';\n\nTooltip.propTypes = {\n    direction: PropTypes.oneOf(['top', 'bottom', 'left', 'right']).isRequired,\n    mode: PropTypes.oneOf(['over', 'click']),\n    content: PropTypes.node.isRequired,\n    offset: PropTypes.number,\n    closeDelay: PropTypes.number\n};\n\nTooltip.defaultProps = {\n    direction: 'bottom',\n    mode: 'over',\n    offset: 14\n};\n"]}